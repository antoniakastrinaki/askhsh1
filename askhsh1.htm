<!DOCTYPE html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta name="viewport" content="width=device-width"><title>file:///
C:/Users/anton/Documents/
%CE%91%CE%99%CE%A4%CE%97%CE%A3%CE%97%20%CE%99%CE%95%CE%A0%20%CE%A0%CE%91%CE%A1%CE%91%CE%93%CE%A9%CE%93%CE%97%20%CE%91%CE%9D%CE%9F%CE%99%CE%9A%CE%A4%CE%A9%CE%9D%20%CE%95%CE%9A%CE%A0%CE%91%CE%99%CE%94%CE%95%CE%A5%CE%A4%CE%99%CE%9A%CE%A9%CE%9D%20%CE%A0%CE%9F%CE%A1%CE%A9%CE%9D/
%CF%81%CE%AE%CE%BC%CE%B1%CF%84%CE%B1_%CF%87%CF%81%CF%8C%CE%BD%CE%BF%CE%B9.htm</title><link rel="stylesheet" type="text/css" href="resource://content-accessible/viewsource.css"></head><body id="viewsource" class="highlight" style="tab-size: 4"><pre id="line1"><span></span><span class="doctype">&lt;!DOCTYPE html&gt;</span><span>
<span id="line2"></span></span><span>&lt;<span class="start-tag">html</span> <span class="attribute-name">xmlns</span>="<a class="attribute-value">http://www.w3.org/1999/xhtml</a>" <span class="attribute-name">lang</span>="<a class="attribute-value">en</a>" <span class="attribute-name">xml:lang</span>="<a class="attribute-value">en</a>" <span class="attribute-name">prefix</span>="<a class="attribute-value">dc: http://purl.org/dc/elements/1.1/</a>"&gt;</span><span>
<span id="line3"></span></span><span>&lt;<span class="start-tag">head</span>&gt;</span><span></span><span>&lt;<span class="start-tag">meta</span> <span class="attribute-name">name</span>="<a class="attribute-value">author</a>" <span class="attribute-name">content</span>="<a class="attribute-value">Created with Hot Potatoes by Half-Baked Software, registered to Antonia.</a>"<span>/</span>&gt;</span><span></span><span>&lt;<span class="start-tag">meta</span> <span class="attribute-name">name</span>="<a class="attribute-value">keywords</a>" <span class="attribute-name">content</span>="<a class="attribute-value">Hot Potatoes, Hot Potatoes, Half-Baked Software, Windows, University of Victoria</a>"<span>/</span>&gt;</span><span>
<span id="line4"></span></span><span>&lt;<span class="start-tag">meta</span> <span class="attribute-name">http-equiv</span>="<a class="attribute-value">Content-Type</a>" <span class="attribute-name">content</span>="<a class="attribute-value">text/html; charset=UTF-8</a>"<span>/</span>&gt;</span><span>
<span id="line5"></span>
<span id="line6"></span></span><span>&lt;<span class="start-tag">meta</span> <span class="attribute-name">name</span>="<a class="attribute-value">dc:creator</a>" <span class="attribute-name">content</span>="<a class="attribute-value">Antonia</a>" <span>/</span>&gt;</span><span>
<span id="line7"></span></span><span>&lt;<span class="start-tag">meta</span> <span class="attribute-name">name</span>="<a class="attribute-value">dc:title</a>" <span class="attribute-name">content</span>="<a class="attribute-value"><span class="entity"><span>&amp;</span>#x0392;</span><span class="entity"><span>&amp;</span>#x03C1;</span><span class="entity"><span>&amp;</span>#x03B5;</span><span class="entity"><span>&amp;</span>#x03C2;</span> <span class="entity"><span>&amp;</span>#x03C4;</span><span class="entity"><span>&amp;</span>#x03BF;</span> <span class="entity"><span>&amp;</span>#x03BA;</span><span class="entity"><span>&amp;</span>#x03BF;</span><span class="entity"><span>&amp;</span>#x03B9;</span><span class="entity"><span>&amp;</span>#x03BD;</span><span class="entity"><span>&amp;</span>#x03CC;</span> <span class="entity"><span>&amp;</span>#x03C3;</span><span class="entity"><span>&amp;</span>#x03C4;</span><span class="entity"><span>&amp;</span>#x03BF;</span><span class="entity"><span>&amp;</span>#x03B9;</span><span class="entity"><span>&amp;</span>#x03C7;</span><span class="entity"><span>&amp;</span>#x03B5;</span><span class="entity"><span>&amp;</span>#x03AF;</span><span class="entity"><span>&amp;</span>#x03BF;</span>.</a>" <span>/</span>&gt;</span><span>
<span id="line8"></span>
<span id="line9"></span>
<span id="line10"></span>
<span id="line11"></span></span><span>&lt;<span class="start-tag">title</span>&gt;</span><span>
<span id="line12"></span><span class="entity"><span>&amp;</span>#x0392;</span><span class="entity"><span>&amp;</span>#x03C1;</span><span class="entity"><span>&amp;</span>#x03B5;</span><span class="entity"><span>&amp;</span>#x03C2;</span> <span class="entity"><span>&amp;</span>#x03C4;</span><span class="entity"><span>&amp;</span>#x03BF;</span> <span class="entity"><span>&amp;</span>#x03BA;</span><span class="entity"><span>&amp;</span>#x03BF;</span><span class="entity"><span>&amp;</span>#x03B9;</span><span class="entity"><span>&amp;</span>#x03BD;</span><span class="entity"><span>&amp;</span>#x03CC;</span> <span class="entity"><span>&amp;</span>#x03C3;</span><span class="entity"><span>&amp;</span>#x03C4;</span><span class="entity"><span>&amp;</span>#x03BF;</span><span class="entity"><span>&amp;</span>#x03B9;</span><span class="entity"><span>&amp;</span>#x03C7;</span><span class="entity"><span>&amp;</span>#x03B5;</span><span class="entity"><span>&amp;</span>#x03AF;</span><span class="entity"><span>&amp;</span>#x03BF;</span>. 
<span id="line13"></span></span><span>&lt;/<span class="end-tag">title</span>&gt;</span><span>
<span id="line14"></span>
<span id="line15"></span></span><span class="comment">&lt;!-- Made with executable version 7.0 Release 3 Build 0 --&gt;</span><span>
<span id="line16"></span>
<span id="line17"></span></span><span class="comment">&lt;!-- The following insertion allows you to add your own code directly to this head tag from the configuration screen --&gt;</span><span>
<span id="line18"></span>
<span id="line19"></span>
<span id="line20"></span>
<span id="line21"></span></span><span>&lt;<span class="start-tag">style</span>&gt;</span><span>
<span id="line22"></span>
<span id="line23"></span>
<span id="line24"></span>/* This is the CSS stylesheet used in the exercise. */
<span id="line25"></span>/* Elements in square brackets are replaced by data based on configuration settings when the exercise is built. */
<span id="line26"></span>
<span id="line27"></span>/* BeginCorePageCSS */
<span id="line28"></span>
<span id="line29"></span>/* Made with executable version 7.0 Release 3 Build 0 */
<span id="line30"></span>
<span id="line31"></span>
<span id="line32"></span>
<span id="line33"></span>/* CSS variables for colours. */
<span id="line34"></span>:root{
<span id="line35"></span>	--strFontFace:       Geneva,Arial,sans-serif;
<span id="line36"></span>	--strFontSize:       medium;
<span id="line37"></span>	--strTextColor:      #000000;
<span id="line38"></span>	--strTitleColor:     #000000;
<span id="line39"></span>
<span id="line40"></span>	--strFuncLightColor: #ffffff;
<span id="line41"></span>	--strFuncShadeColor: #7f7f7f;
<span id="line42"></span>	--strLinkColor:      #0000FF;
<span id="line43"></span>	--strVLinkColor:     #0000CC;
<span id="line44"></span>	
<span id="line45"></span>	--strNavBarColor:    #000000;
<span id="line46"></span>	--strNavLightColor:  #7f7f7f;
<span id="line47"></span>	--strNavShadeColor:  #000000;
<span id="line48"></span>	--strNavTextColor:   #ffffff;
<span id="line49"></span>	
<span id="line50"></span>	--strPageBGColor:    #C0C0C0;
<span id="line51"></span>	--strExBGColor:      #FFFFFF;
<span id="line52"></span>}
<span id="line53"></span>
<span id="line54"></span>body{
<span id="line55"></span>	font-family: var(--strFontFace);
<span id="line56"></span>	background-color: var(--strPageBGColor);
<span id="line57"></span>	color: var(--strTextColor);
<span id="line58"></span> 
<span id="line59"></span>	margin-right: 5%;
<span id="line60"></span>	margin-left: 5%;
<span id="line61"></span>	font-size: var(--strFontSize);
<span id="line62"></span>	padding-bottom: 0.5em;
<span id="line63"></span>}
<span id="line64"></span>
<span id="line65"></span>p{
<span id="line66"></span>	text-align: left;
<span id="line67"></span>	margin: 0px;
<span id="line68"></span>	font-size: 1em;
<span id="line69"></span>}
<span id="line70"></span>
<span id="line71"></span>table,div,span,td{
<span id="line72"></span>	font-size: 1em;
<span id="line73"></span>	color: var(--strTextColor);
<span id="line74"></span>}
<span id="line75"></span>
<span id="line76"></span>div.Titles{
<span id="line77"></span>	padding: 0.5em;;
<span id="line78"></span>	text-align: center;
<span id="line79"></span>	color: var(--strTitleColor);
<span id="line80"></span>}
<span id="line81"></span>
<span id="line82"></span>button{
<span id="line83"></span>	font-family: var(--strFontFace);
<span id="line84"></span>	font-size: 1em;
<span id="line85"></span>	display: inline;
<span id="line86"></span>}
<span id="line87"></span>
<span id="line88"></span>.ExerciseTitle{
<span id="line89"></span>	font-size: 140%;
<span id="line90"></span>	color: var(--strTitleColor);
<span id="line91"></span>}
<span id="line92"></span>
<span id="line93"></span>.ExerciseSubtitle{
<span id="line94"></span>	font-size: 120%;
<span id="line95"></span>	color: var(--strTitleColor);
<span id="line96"></span>}
<span id="line97"></span>
<span id="line98"></span>div.StdDiv, div.ExerciseContainer, div.ReadingContainer{
<span id="line99"></span>	background-color: var(--strExBGColor);
<span id="line100"></span>	text-align: center;
<span id="line101"></span>	font-size: 1em;
<span id="line102"></span>	color: var(--strTextColor);
<span id="line103"></span>	padding: 0.5em;
<span id="line104"></span>	border-style: solid;
<span id="line105"></span>	border-width: 1px 1px 1px 1px;
<span id="line106"></span>	border-color: var(--strTextColor);
<span id="line107"></span>	margin-bottom: 1px;
<span id="line108"></span>}
<span id="line109"></span>
<span id="line110"></span>div.ReadingContainer, div.ExerciseContainer{
<span id="line111"></span>	min-width: 15em;
<span id="line112"></span>	flex-grow: 1;
<span id="line113"></span>	flex-basis: 0;
<span id="line114"></span>	margin: 1px;
<span id="line115"></span>}
<span id="line116"></span>
<span id="line117"></span>div#ContainerDiv{
<span id="line118"></span>	margin: -1px;
<span id="line119"></span>	padding: 0;
<span id="line120"></span>	border: none;
<span id="line121"></span>	display: flex;
<span id="line122"></span>	flex-direction: row;
<span id="line123"></span>	flex-wrap: wrap;
<span id="line124"></span>	justify-content: space-between;
<span id="line125"></span>}
<span id="line126"></span>
<span id="line127"></span>/* EndCorePageCSS */
<span id="line128"></span>
<span id="line129"></span>.RTLText{
<span id="line130"></span>	text-align: right;
<span id="line131"></span>	font-size: 150%;
<span id="line132"></span>	direction: rtl;
<span id="line133"></span>	font-family: "Simplified Arabic", "Traditional Arabic", "Times New Roman", var(--strFontFace); 
<span id="line134"></span>}
<span id="line135"></span>
<span id="line136"></span>.CentredRTLText{
<span id="line137"></span>	text-align: center;
<span id="line138"></span>	font-size: 150%;
<span id="line139"></span>	direction: rtl;
<span id="line140"></span>	font-family: "Simplified Arabic", "Traditional Arabic", "Times New Roman", var(--strFontFace); 
<span id="line141"></span>}
<span id="line142"></span>
<span id="line143"></span>button p.RTLText{
<span id="line144"></span>	text-align: center;
<span id="line145"></span>}
<span id="line146"></span>
<span id="line147"></span>.RTLGapBox{
<span id="line148"></span>	text-align: right;
<span id="line149"></span>	font-size: 150%;
<span id="line150"></span>	direction: rtl;
<span id="line151"></span>	font-family: "Times New Roman", var(--strFontFace);
<span id="line152"></span>}
<span id="line153"></span>
<span id="line154"></span>.Guess{
<span id="line155"></span>	font-weight: bold;
<span id="line156"></span>}
<span id="line157"></span>
<span id="line158"></span>.CorrectAnswer{
<span id="line159"></span>	font-weight: bold;
<span id="line160"></span>}
<span id="line161"></span>
<span id="line162"></span>div#Timer{
<span id="line163"></span>	padding: 0.25em;
<span id="line164"></span>	margin-left: auto;
<span id="line165"></span>	margin-right: auto;
<span id="line166"></span>	text-align: center;
<span id="line167"></span>	color: var(--strTitleColor);
<span id="line168"></span>}
<span id="line169"></span>
<span id="line170"></span>span#TimerText{
<span id="line171"></span>	padding: 0.25em;
<span id="line172"></span>	border-width: 1px;
<span id="line173"></span>	border-style: solid;
<span id="line174"></span>	font-weight: bold;
<span id="line175"></span>	display: none;
<span id="line176"></span>	color: var(--strTitleColor);
<span id="line177"></span>}
<span id="line178"></span>
<span id="line179"></span>span.Instructions{
<span id="line180"></span>
<span id="line181"></span>}
<span id="line182"></span>
<span id="line183"></span>div.ExerciseText{
<span id="line184"></span>
<span id="line185"></span>}
<span id="line186"></span>
<span id="line187"></span>.FeedbackText, .FeedbackText span.CorrectAnswer, .FeedbackText span.Guess, .FeedbackText span.Answer{
<span id="line188"></span>	color: var(--strTitleColor);
<span id="line189"></span>}
<span id="line190"></span>
<span id="line191"></span>.LeftItem{
<span id="line192"></span>	font-size: 1em;
<span id="line193"></span>	color: var(--strTextColor);
<span id="line194"></span>	text-align: left;
<span id="line195"></span>}
<span id="line196"></span>
<span id="line197"></span>.RightItem{
<span id="line198"></span>	font-weight: bold;
<span id="line199"></span>	font-size: 1em;
<span id="line200"></span>	color: var(--strTextColor);
<span id="line201"></span>	text-align: left;
<span id="line202"></span>}
<span id="line203"></span>
<span id="line204"></span>span.CorrectMark{
<span id="line205"></span>
<span id="line206"></span>}
<span id="line207"></span>
<span id="line208"></span>input, textarea{
<span id="line209"></span>	font-family: var(--strFontFace);
<span id="line210"></span>	font-size: 120%;
<span id="line211"></span>}
<span id="line212"></span>
<span id="line213"></span>select{
<span id="line214"></span>	font-size: 1em;
<span id="line215"></span>}
<span id="line216"></span>
<span id="line217"></span>div.Feedback {
<span id="line218"></span>	background-color: var(--strPageBGColor);
<span id="line219"></span>	left: 33%;
<span id="line220"></span>	width: 34%;
<span id="line221"></span>	top: 33%;
<span id="line222"></span>	z-index: 1;
<span id="line223"></span>	border-style: solid;
<span id="line224"></span>	border-width: 1px;
<span id="line225"></span>	padding: 5px;
<span id="line226"></span>	text-align: center;
<span id="line227"></span>	color: var(--strTitleColor);
<span id="line228"></span>	position: absolute;
<span id="line229"></span>	display: none;
<span id="line230"></span>	font-size: 1em;
<span id="line231"></span>}
<span id="line232"></span>
<span id="line233"></span>
<span id="line234"></span>
<span id="line235"></span>
<span id="line236"></span>div.ExerciseDiv{
<span id="line237"></span>	color: var(--strTextColor);
<span id="line238"></span>}
<span id="line239"></span>
<span id="line240"></span>/* JMatch standard output table. */
<span id="line241"></span>table.MatchTable{
<span id="line242"></span>	margin: 2em auto; 
<span id="line243"></span>	border-width: 0;
<span id="line244"></span>}
<span id="line245"></span>
<span id="line246"></span>/* JMatch flashcard styles */
<span id="line247"></span>table.FlashcardTable{
<span id="line248"></span>	background-color: transparent;
<span id="line249"></span>	color: var(--strTextColor);
<span id="line250"></span>	border-color: var(--strTextColor);
<span id="line251"></span>	margin-left: auto;
<span id="line252"></span>	margin-right: auto;
<span id="line253"></span>	margin-top: 2em;
<span id="line254"></span>	margin-bottom: 2em;
<span id="line255"></span>	/*width: 90%;*/
<span id="line256"></span>	position: relative;
<span id="line257"></span>	text-align: center;
<span id="line258"></span>	padding: 0px;
<span id="line259"></span>}
<span id="line260"></span>
<span id="line261"></span>table.FlashcardTable tr{
<span id="line262"></span>	border-style: none;
<span id="line263"></span>	margin: 0px;
<span id="line264"></span>	padding: 0px;
<span id="line265"></span>	background-color: var(--strExBGColor);
<span id="line266"></span>}
<span id="line267"></span>
<span id="line268"></span>table.FlashcardTable td.Showing{
<span id="line269"></span>	font-size: 140%;
<span id="line270"></span>	text-align: center;
<span id="line271"></span>	width: 50%;
<span id="line272"></span>	display: table-cell;
<span id="line273"></span>	padding: 2em;
<span id="line274"></span>	margin: 0px;
<span id="line275"></span>	border-style: solid;
<span id="line276"></span>	border-width: 1px;
<span id="line277"></span>	border-radius: 0.5em;
<span id="line278"></span>	color: var(--strTextColor);
<span id="line279"></span>	box-shadow: 0.2em 0.3em 0.2em var(--strNavShadeColor);
<span id="line280"></span>	background-color: var(--strPageBGColor);
<span id="line281"></span>}
<span id="line282"></span>
<span id="line283"></span>table.FlashcardTable td.Hidden{
<span id="line284"></span>	display: none;
<span id="line285"></span>}
<span id="line286"></span>
<span id="line287"></span>/* JMix styles */
<span id="line288"></span>div.JMixDrag, div.JMatchDrag{
<span id="line289"></span>	padding: 0;
<span id="line290"></span>	background-color: var(--strPageBGColor);
<span id="line291"></span>	border-style: none;
<span id="line292"></span>}
<span id="line293"></span>
<span id="line294"></span>div#GuessDiv{
<span id="line295"></span>	padding: 0.5em;
<span id="line296"></span>	margin-bottom: 2em;
<span id="line297"></span>}
<span id="line298"></span>
<span id="line299"></span>div#SegmentDiv{
<span id="line300"></span>	margin-top: 2em;
<span id="line301"></span>	margin-bottom: 2em;
<span id="line302"></span>	text-align: center;
<span id="line303"></span>}
<span id="line304"></span>
<span id="line305"></span>a.ExSegment{
<span id="line306"></span>	font-size: 120%;
<span id="line307"></span>	font-weight: bold;
<span id="line308"></span>	text-decoration: none;
<span id="line309"></span>	color: var(--strTextColor);
<span id="line310"></span>	display: inline-block;
<span id="line311"></span>	padding: 0.5em;
<span id="line312"></span>	border: solid 1pt gray;
<span id="line313"></span>	margin-bottom: 0.5em;
<span id="line314"></span>}
<span id="line315"></span>
<span id="line316"></span>span.RemainingWordList{
<span id="line317"></span>	font-style: italic;
<span id="line318"></span>}
<span id="line319"></span>
<span id="line320"></span>div.DropLine {
<span id="line321"></span>	position: absolute;
<span id="line322"></span>	text-align: left;
<span id="line323"></span>	border-bottom-style: solid;
<span id="line324"></span>	border-bottom-width: 1px;
<span id="line325"></span>	border-bottom-color: var(--strTitleColor);
<span id="line326"></span>	width: 80%;
<span id="line327"></span>	left: 10%;
<span id="line328"></span>}
<span id="line329"></span>
<span id="line330"></span>/* JCloze styles */
<span id="line331"></span>
<span id="line332"></span>.ClozeWordList{
<span id="line333"></span>	text-align: center;
<span id="line334"></span>	font-weight: bold;
<span id="line335"></span>}
<span id="line336"></span>
<span id="line337"></span>div.ClozeBody{
<span id="line338"></span>	text-align: left;
<span id="line339"></span>	margin-top: 2em;
<span id="line340"></span>	margin-bottom: 2em;
<span id="line341"></span>	line-height: 2.0
<span id="line342"></span>}
<span id="line343"></span>
<span id="line344"></span>span.GapSpan{
<span id="line345"></span>	font-weight: bold;
<span id="line346"></span>}
<span id="line347"></span>
<span id="line348"></span>/* JCross styles */
<span id="line349"></span>
<span id="line350"></span>table.CrosswordGrid{
<span id="line351"></span>	margin: auto auto 1em auto;
<span id="line352"></span>	border-collapse: collapse;
<span id="line353"></span>	padding: 0px;
<span id="line354"></span>	background-color: #000000;
<span id="line355"></span>}
<span id="line356"></span>
<span id="line357"></span>table.CrosswordGrid tbody tr td{
<span id="line358"></span>	width: 1.5em;
<span id="line359"></span>	height: 1.5em;
<span id="line360"></span>	text-align: center;
<span id="line361"></span>	vertical-align: middle;
<span id="line362"></span>	font-size: 140%;
<span id="line363"></span>	padding: 1px;
<span id="line364"></span>	margin: 0px;
<span id="line365"></span>	border-style: solid;
<span id="line366"></span>	border-width: 1px;
<span id="line367"></span>	border-color: #000000;
<span id="line368"></span>	color: #000000;
<span id="line369"></span>}
<span id="line370"></span>
<span id="line371"></span>table.CrosswordGrid span{
<span id="line372"></span>	color: #000000;
<span id="line373"></span>}
<span id="line374"></span>
<span id="line375"></span>table.CrosswordGrid td.BlankCell{
<span id="line376"></span>	background-color: #000000;
<span id="line377"></span>	color: #000000;
<span id="line378"></span>}
<span id="line379"></span>
<span id="line380"></span>table.CrosswordGrid td.LetterOnlyCell{
<span id="line381"></span>	text-align: center;
<span id="line382"></span>	vertical-align: middle;
<span id="line383"></span>	background-color: #ffffff;
<span id="line384"></span>	color: #000000;
<span id="line385"></span>	font-weight: bold;
<span id="line386"></span>}
<span id="line387"></span>
<span id="line388"></span>table.CrosswordGrid td.NumLetterCell{
<span id="line389"></span>	text-align: left;
<span id="line390"></span>	vertical-align: top;
<span id="line391"></span>	background-color: #ffffff;
<span id="line392"></span>	color: #000000;
<span id="line393"></span>	padding: 1px;
<span id="line394"></span>	font-weight: bold;
<span id="line395"></span>}
<span id="line396"></span>
<span id="line397"></span>.NumLetterCellText{
<span id="line398"></span>	cursor: pointer;
<span id="line399"></span>	color: #000000;
<span id="line400"></span>}
<span id="line401"></span>
<span id="line402"></span>.GridNum{
<span id="line403"></span>	vertical-align: super;
<span id="line404"></span>	font-size: 66%;
<span id="line405"></span>	font-weight: bold;
<span id="line406"></span>	text-decoration: none;
<span id="line407"></span>	color: #000000;
<span id="line408"></span>}
<span id="line409"></span>
<span id="line410"></span>.GridNum:hover, .GridNum:visited{
<span id="line411"></span>	color: #000000;
<span id="line412"></span>}
<span id="line413"></span>
<span id="line414"></span>table#Clues{
<span id="line415"></span>	margin: auto;
<span id="line416"></span>	vertical-align: top;
<span id="line417"></span>}
<span id="line418"></span>
<span id="line419"></span>table#Clues td{
<span id="line420"></span>	vertical-align: top;
<span id="line421"></span>}
<span id="line422"></span>
<span id="line423"></span>table.ClueList{
<span id="line424"></span>  margin: auto;
<span id="line425"></span>}
<span id="line426"></span>
<span id="line427"></span>td.ClueNum{
<span id="line428"></span>	text-align: right;
<span id="line429"></span>	font-weight: bold;
<span id="line430"></span>	vertical-align: top;
<span id="line431"></span>}
<span id="line432"></span>
<span id="line433"></span>td.Clue{
<span id="line434"></span>	text-align: left;
<span id="line435"></span>}
<span id="line436"></span>
<span id="line437"></span>div#ClueEntry{
<span id="line438"></span>	text-align: left;
<span id="line439"></span>	margin-bottom: 1em;
<span id="line440"></span>}
<span id="line441"></span>
<span id="line442"></span>/* Keypad styles */
<span id="line443"></span>
<span id="line444"></span>div.Keypad{
<span id="line445"></span>	text-align: center;
<span id="line446"></span>	display: none; /* initially hidden, shown if needed */
<span id="line447"></span>	margin-bottom: 0.5em;
<span id="line448"></span>}
<span id="line449"></span>
<span id="line450"></span>div.Keypad button{
<span id="line451"></span>	font-family: var(--strFontFace);
<span id="line452"></span>	font-size: 120%;
<span id="line453"></span>	background-color: #ffffff;
<span id="line454"></span>	color: #000000;
<span id="line455"></span>	width: 2em;
<span id="line456"></span>	border-style: solid;
<span id="line457"></span>	border-width: 1px;
<span id="line458"></span>	border-radius: 0.5em;
<span id="line459"></span>	color: var(--strTextColor);
<span id="line460"></span>	box-shadow: 0.2em 0.3em 0.2em var(--strTextColor);
<span id="line461"></span>}
<span id="line462"></span>
<span id="line463"></span>/* JQuiz styles */
<span id="line464"></span>
<span id="line465"></span>div.QuestionNavigation{
<span id="line466"></span>	text-align: center;
<span id="line467"></span>}
<span id="line468"></span>
<span id="line469"></span>.QNum{
<span id="line470"></span>	margin: 0em 1em 0.5em 1em;
<span id="line471"></span>	font-weight: bold;
<span id="line472"></span>	vertical-align: middle;
<span id="line473"></span>}
<span id="line474"></span>
<span id="line475"></span>textarea{
<span id="line476"></span>	font-family: var(--strFontFace);
<span id="line477"></span>}
<span id="line478"></span>
<span id="line479"></span>.QuestionText{
<span id="line480"></span>	text-align: left;
<span id="line481"></span>	margin: 0px;
<span id="line482"></span>	font-size: 1em;
<span id="line483"></span>}
<span id="line484"></span>
<span id="line485"></span>.Answer{
<span id="line486"></span>	font-size: 120%;
<span id="line487"></span>}
<span id="line488"></span>
<span id="line489"></span>.PartialAnswer{
<span id="line490"></span>	font-size: 120%;
<span id="line491"></span>	letter-spacing: 0.1em;
<span id="line492"></span>	color: var(--strTitleColor);
<span id="line493"></span>}
<span id="line494"></span>
<span id="line495"></span>.Highlight{
<span id="line496"></span>	color: #000000;
<span id="line497"></span>	background-color: #ffff00;
<span id="line498"></span>	font-weight: bold;
<span id="line499"></span>	font-size: 120%;
<span id="line500"></span>}
<span id="line501"></span>
<span id="line502"></span>ol.QuizQuestions{
<span id="line503"></span>	text-align: left;
<span id="line504"></span>	list-style-type: none;
<span id="line505"></span>}
<span id="line506"></span>
<span id="line507"></span>li.QuizQuestion{
<span id="line508"></span>	padding: 1em;
<span id="line509"></span>	border-style: solid;
<span id="line510"></span>	border-width: 0px 0px 1px 0px;
<span id="line511"></span>}
<span id="line512"></span>
<span id="line513"></span>ol.MCAnswers{
<span id="line514"></span>	text-align: left;
<span id="line515"></span>	list-style-type: upper-alpha;
<span id="line516"></span>	padding: 1em;
<span id="line517"></span>}
<span id="line518"></span>
<span id="line519"></span>ol.MCAnswers li{
<span id="line520"></span>	margin-bottom: 1em;
<span id="line521"></span>}
<span id="line522"></span>
<span id="line523"></span>ol.MSelAnswers{
<span id="line524"></span>	text-align: left;
<span id="line525"></span>	list-style-type: lower-alpha;
<span id="line526"></span>	padding: 1em;
<span id="line527"></span>}
<span id="line528"></span>
<span id="line529"></span>div.ShortAnswer{
<span id="line530"></span>	padding: 1em;
<span id="line531"></span>}
<span id="line532"></span>
<span id="line533"></span>.FuncButton {
<span id="line534"></span>	border-style: solid;
<span id="line535"></span>	border-radius: 0.5em;
<span id="line536"></span>	padding: 0.5em;
<span id="line537"></span>	min-width: 3em;
<span id="line538"></span>
<span id="line539"></span>	border-left-color: var(--strFuncLightColor);
<span id="line540"></span>	border-top-color: var(--strFuncLightColor);
<span id="line541"></span>	border-right-color: var(--strFuncShadeColor);
<span id="line542"></span>	border-bottom-color: var(--strFuncShadeColor);
<span id="line543"></span>	color: var(--strTextColor);
<span id="line544"></span>	background-color: var(--strExBGColor);
<span id="line545"></span>
<span id="line546"></span>	border-width: 1pt;
<span id="line547"></span>	cursor: pointer;	
<span id="line548"></span>	box-shadow: 0.2em 0.3em 0.2em var(--strFuncShadeColor);
<span id="line549"></span>}
<span id="line550"></span>
<span id="line551"></span>.FuncButton:active {
<span id="line552"></span>	box-shadow: none;
<span id="line553"></span>}
<span id="line554"></span>
<span id="line555"></span>.FuncButton:hover{
<span id="line556"></span>	color: var(--strExBGColor);
<span id="line557"></span>	background-color: var(--strTextColor);
<span id="line558"></span>}
<span id="line559"></span>
<span id="line560"></span>/*BeginNavBarStyle*/
<span id="line561"></span>
<span id="line562"></span>div.NavButtonBar{
<span id="line563"></span>	background-color: var(--strNavBarColor);
<span id="line564"></span>	text-align: center;
<span id="line565"></span>	margin: 0.25rem 0;
<span id="line566"></span>	clear: both;
<span id="line567"></span>	font-size: 1em;
<span id="line568"></span>	padding: 0.2em;
<span id="line569"></span>	box-sizing: border-box;
<span id="line570"></span>}
<span id="line571"></span>
<span id="line572"></span>.NavButton {
<span id="line573"></span>	border-style: solid;
<span id="line574"></span>	border-radius: 0.5em;
<span id="line575"></span>	padding: 0.5em;
<span id="line576"></span>	min-width: 3em;
<span id="line577"></span>	
<span id="line578"></span>	border-left-color: var(--strNavLightColor);
<span id="line579"></span>	border-top-color: var(--strNavLightColor);
<span id="line580"></span>	border-right-color: var(--strNavShadeColor);
<span id="line581"></span>	border-bottom-color: var(--strNavShadeColor); 
<span id="line582"></span>	background-color: var(--strNavBarColor);
<span id="line583"></span>	color: var(--strNavTextColor);
<span id="line584"></span>
<span id="line585"></span>	border-width: 1pt;
<span id="line586"></span>	cursor: pointer;	
<span id="line587"></span>	box-shadow: 0.2em 0.3em 0.2em var(--strNavShadeColor);
<span id="line588"></span>}
<span id="line589"></span>
<span id="line590"></span>.NavButton:active {
<span id="line591"></span>	box-shadow: none;
<span id="line592"></span>}
<span id="line593"></span>
<span id="line594"></span>.NavButton:hover{
<span id="line595"></span>	color: var(--strNavBarColor);
<span id="line596"></span>	background-color: var(--strNavTextColor);
<span id="line597"></span>}
<span id="line598"></span>
<span id="line599"></span>/*EndNavBarStyle*/
<span id="line600"></span>
<span id="line601"></span>a{
<span id="line602"></span>	color: var(--strLinkColor);
<span id="line603"></span>}
<span id="line604"></span>
<span id="line605"></span>a:visited{
<span id="line606"></span>	color: var(--strVLinkColor);
<span id="line607"></span>}
<span id="line608"></span>
<span id="line609"></span>a:hover{
<span id="line610"></span>	color: var(--strLinkColor);
<span id="line611"></span>}
<span id="line612"></span>
<span id="line613"></span>div.CardStyle {
<span id="line614"></span>	position: absolute;
<span id="line615"></span>	font-family: var(--strFontFace);
<span id="line616"></span>	font-size: 1em;
<span id="line617"></span>	border-style: solid;
<span id="line618"></span>	border-radius: 0.5em;
<span id="line619"></span>	padding: 0.5em;
<span id="line620"></span>	min-width: 2em;
<span id="line621"></span>	border-width: 1pt;
<span id="line622"></span>	color: var(--strTextColor);
<span id="line623"></span>	box-shadow: 0.2em 0.3em 0.2em var(--strTextColor);
<span id="line624"></span>	background-color: var(--strExBGColor);
<span id="line625"></span>	left: -50px;
<span id="line626"></span>	top: -50px;
<span id="line627"></span>	overflow: visible;
<span id="line628"></span>	touch-action: none;
<span id="line629"></span>	user-select: none;
<span id="line630"></span>	box-sizing: border-box;
<span id="line631"></span>}
<span id="line632"></span>
<span id="line633"></span>div.CardStyleCentered{
<span id="line634"></span>	text-align: center;
<span id="line635"></span>}
<span id="line636"></span>
<span id="line637"></span>.rtl{
<span id="line638"></span>	text-align: right;
<span id="line639"></span>	font-size: 140%;
<span id="line640"></span>}
<span id="line641"></span>
<span id="line642"></span>
<span id="line643"></span></span><span>&lt;/<span class="end-tag">style</span>&gt;</span><span>
<span id="line644"></span>
<span id="line645"></span></span><span>&lt;<span class="start-tag">script</span>&gt;</span><span>
<span id="line646"></span>
<span id="line647"></span>//</span><span>&lt;!</span><span>[CDATA[
<span id="line648"></span>
<span id="line649"></span></span><span>&lt;!</span><span>--
<span id="line650"></span>
<span id="line651"></span>
<span id="line652"></span>
<span id="line653"></span>
<span id="line654"></span>//CODE FOR HANDLING NAV BUTTONS AND FUNCTION BUTTONS
<span id="line655"></span>
<span id="line656"></span>function FocusAButton(){
<span id="line657"></span>	if (document.getElementById('CheckButton1') != null){
<span id="line658"></span>		document.getElementById('CheckButton1').focus();
<span id="line659"></span>	}
<span id="line660"></span>	else{
<span id="line661"></span>		if (document.getElementById('CheckButton2') != null){
<span id="line662"></span>			document.getElementById('CheckButton2').focus();
<span id="line663"></span>		}
<span id="line664"></span>		else{
<span id="line665"></span>			document.getElementsByTagName('button')[0].focus();
<span id="line666"></span>		}
<span id="line667"></span>	}
<span id="line668"></span>}
<span id="line669"></span>
<span id="line670"></span>
<span id="line671"></span>
<span id="line672"></span>
<span id="line673"></span>//CODE FOR HANDLING DISPLAY OF POPUP FEEDBACK BOX
<span id="line674"></span>
<span id="line675"></span>var topZ = 1000;
<span id="line676"></span>
<span id="line677"></span>function ShowMessage(Feedback){
<span id="line678"></span>	var Output = Feedback + '</span><span>&lt;b</span><span>r /&gt;</span><span>&lt;b</span><span>r /&gt;';
<span id="line679"></span>	document.getElementById('FeedbackContent').innerHTML = Output;
<span id="line680"></span>	var FDiv = document.getElementById('FeedbackDiv');
<span id="line681"></span>	topZ++;
<span id="line682"></span>	FDiv.style.zIndex = topZ;
<span id="line683"></span>	FDiv.style.top = TopSettingWithScrollOffset(30) + 'px';
<span id="line684"></span>
<span id="line685"></span>	FDiv.style.display = 'block';
<span id="line686"></span>
<span id="line687"></span>	ShowElements(false, 'input');
<span id="line688"></span>	ShowElements(false, 'select');
<span id="line689"></span>	ShowElements(false, 'object');
<span id="line690"></span>	ShowElements(true, 'object', 'FeedbackContent');
<span id="line691"></span>
<span id="line692"></span>//Focus the OK button
<span id="line693"></span>	setTimeout("document.getElementById('FeedbackOKButton').focus()", 50);
<span id="line694"></span>	
<span id="line695"></span>//
<span id="line696"></span>}
<span id="line697"></span>
<span id="line698"></span>function ShowElements(Show, TagName, ContainerToReverse){
<span id="line699"></span>// added third argument to allow objects in the feedback box to appear
<span id="line700"></span>//IE bug -- hide all the form elements that will show through the popup
<span id="line701"></span>//FF on Mac bug : doesn't redisplay objects whose visibility is set to visible
<span id="line702"></span>//unless the object's display property is changed
<span id="line703"></span>
<span id="line704"></span>	//get container object (by Id passed in, or use document otherwise)
<span id="line705"></span>	TopNode = document.getElementById(ContainerToReverse);
<span id="line706"></span>	var Els;
<span id="line707"></span>	if (TopNode != null) {
<span id="line708"></span>		Els = TopNode.getElementsByTagName(TagName);
<span id="line709"></span>	} else {
<span id="line710"></span>		Els = document.getElementsByTagName(TagName);
<span id="line711"></span>	}
<span id="line712"></span>
<span id="line713"></span>	for (var i=0; i</span><span>&lt;E</span><span>ls.length; i++){
<span id="line714"></span>		if (TagName == "object") {
<span id="line715"></span>			//manipulate object elements in all browsers
<span id="line716"></span>			if (Show == true){
<span id="line717"></span>				Els[i].style.visibility = 'visible';
<span id="line718"></span>			}
<span id="line719"></span>			else{
<span id="line720"></span>				Els[i].style.visibility = 'hidden';
<span id="line721"></span>			}
<span id="line722"></span>		} 
<span id="line723"></span>	}
<span id="line724"></span>}
<span id="line725"></span>
<span id="line726"></span>
<span id="line727"></span>
<span id="line728"></span>function HideFeedback(){
<span id="line729"></span>	document.getElementById('FeedbackDiv').style.display = 'none';
<span id="line730"></span>	ShowElements(true, 'input');
<span id="line731"></span>	ShowElements(true, 'select');
<span id="line732"></span>	ShowElements(true, 'object');
<span id="line733"></span>}
<span id="line734"></span>
<span id="line735"></span>
<span id="line736"></span>//GENERAL UTILITY FUNCTIONS AND VARIABLES
<span id="line737"></span>
<span id="line738"></span>//PAGE DIMENSION FUNCTIONS
<span id="line739"></span>function PageDim(){
<span id="line740"></span>//Get the page width and height
<span id="line741"></span>	this.W = 600;
<span id="line742"></span>	this.H = 400;
<span id="line743"></span>	this.W = document.getElementsByTagName('body')[0].offsetWidth;
<span id="line744"></span>	this.H = document.getElementsByTagName('body')[0].offsetHeight;
<span id="line745"></span>}
<span id="line746"></span>
<span id="line747"></span>var pg = null;
<span id="line748"></span>
<span id="line749"></span>function GetPageXY(El) {
<span id="line750"></span>	var XY = {x: 0, y: 0};
<span id="line751"></span>	while(El){
<span id="line752"></span>		XY.x += El.offsetLeft;
<span id="line753"></span>		XY.y += El.offsetTop;
<span id="line754"></span>		El = El.offsetParent;
<span id="line755"></span>	}
<span id="line756"></span>	return XY;
<span id="line757"></span>}
<span id="line758"></span>
<span id="line759"></span>function GetScrollTop(){
<span id="line760"></span>	if (typeof(window.pageYOffset) == 'number'){
<span id="line761"></span>		return window.pageYOffset;
<span id="line762"></span>	}
<span id="line763"></span>	else{
<span id="line764"></span>		if ((document.body)&amp;&amp;(document.body.scrollTop)){
<span id="line765"></span>			return document.body.scrollTop;
<span id="line766"></span>		}
<span id="line767"></span>		else{
<span id="line768"></span>			if ((document.documentElement)&amp;&amp;(document.documentElement.scrollTop)){
<span id="line769"></span>				return document.documentElement.scrollTop;
<span id="line770"></span>			}
<span id="line771"></span>			else{
<span id="line772"></span>				return 0;
<span id="line773"></span>			}
<span id="line774"></span>		}
<span id="line775"></span>	}
<span id="line776"></span>}
<span id="line777"></span>
<span id="line778"></span>function GetViewportHeight(){
<span id="line779"></span>	if (typeof window.innerHeight != 'undefined'){
<span id="line780"></span>		return window.innerHeight;
<span id="line781"></span>	}
<span id="line782"></span>	else{
<span id="line783"></span>		if (((typeof document.documentElement != 'undefined')&amp;&amp;(typeof document.documentElement.clientHeight !=
<span id="line784"></span>     'undefined'))&amp;&amp;(document.documentElement.clientHeight != 0)){
<span id="line785"></span>			return document.documentElement.clientHeight;
<span id="line786"></span>		}
<span id="line787"></span>		else{
<span id="line788"></span>			return document.getElementsByTagName('body')[0].clientHeight;
<span id="line789"></span>		}
<span id="line790"></span>	}
<span id="line791"></span>}
<span id="line792"></span>
<span id="line793"></span>function TopSettingWithScrollOffset(TopPercent){
<span id="line794"></span>	var T = Math.floor(GetViewportHeight() * (TopPercent/100));
<span id="line795"></span>	return GetScrollTop() + T; 
<span id="line796"></span>}
<span id="line797"></span>
<span id="line798"></span>//CODE FOR AVOIDING LOSS OF DATA WHEN BACKSPACE KEY INVOKES history.back()
<span id="line799"></span>var InTextBox = false;
<span id="line800"></span>
<span id="line801"></span>function SuppressBackspace(e){ 
<span id="line802"></span>	if (InTextBox == true){return;}
<span id="line803"></span>	thisKey = e.keyCode;
<span id="line804"></span>
<span id="line805"></span>	var Suppress = false;
<span id="line806"></span>
<span id="line807"></span>	if (thisKey == 8) {
<span id="line808"></span>		Suppress = true;
<span id="line809"></span>		e.preventDefault();
<span id="line810"></span>	}
<span id="line811"></span>}
<span id="line812"></span>
<span id="line813"></span>window.addEventListener('keypress',SuppressBackspace,false);
<span id="line814"></span>
<span id="line815"></span>function ReduceItems(InArray, ReduceToSize){
<span id="line816"></span>	var ItemToDump=0;
<span id="line817"></span>	var j=0;
<span id="line818"></span>	while (InArray.length &gt; ReduceToSize){
<span id="line819"></span>		ItemToDump = Math.floor(InArray.length*Math.random());
<span id="line820"></span>		InArray.splice(ItemToDump, 1);
<span id="line821"></span>	}
<span id="line822"></span>}
<span id="line823"></span>
<span id="line824"></span>function Shuffle(InArray){
<span id="line825"></span>	var Num;
<span id="line826"></span>	var Temp = new Array();
<span id="line827"></span>	var Len = InArray.length;
<span id="line828"></span>
<span id="line829"></span>	var j = Len;
<span id="line830"></span>
<span id="line831"></span>	for (var i=0; i</span><span>&lt;L</span><span>en; i++){
<span id="line832"></span>		Temp[i] = InArray[i];
<span id="line833"></span>	}
<span id="line834"></span>
<span id="line835"></span>	for (i=0; i</span><span>&lt;L</span><span>en; i++){
<span id="line836"></span>		Num = Math.floor(j  *  Math.random());
<span id="line837"></span>		InArray[i] = Temp[Num];
<span id="line838"></span>
<span id="line839"></span>		for (var k=Num; k </span><span>&lt; </span><span>(j-1); k++) {
<span id="line840"></span>			Temp[k] = Temp[k+1];
<span id="line841"></span>		}
<span id="line842"></span>		j--;
<span id="line843"></span>	}
<span id="line844"></span>	return InArray;
<span id="line845"></span>}
<span id="line846"></span>
<span id="line847"></span>function WriteToInstructions(Feedback) {
<span id="line848"></span>	document.getElementById('InstructionsDiv').innerHTML = Feedback;
<span id="line849"></span>
<span id="line850"></span>}
<span id="line851"></span>
<span id="line852"></span>
<span id="line853"></span>
<span id="line854"></span>
<span id="line855"></span>function EscapeDoubleQuotes(InString){
<span id="line856"></span>	return InString.replace(/"/g, '&amp;quot;')
<span id="line857"></span>}
<span id="line858"></span>
<span id="line859"></span>function TrimString(InString){
<span id="line860"></span>        var x = 0;
<span id="line861"></span>
<span id="line862"></span>        if (InString.length != 0) {
<span id="line863"></span>                while ((InString.charAt(InString.length - 1) == '\u0020') || (InString.charAt(InString.length - 1) == '\u000A') || (InString.charAt(InString.length - 1) == '\u000D')){
<span id="line864"></span>                        InString = InString.substring(0, InString.length - 1)
<span id="line865"></span>                }
<span id="line866"></span>
<span id="line867"></span>                while ((InString.charAt(0) == '\u0020') || (InString.charAt(0) == '\u000A') || (InString.charAt(0) == '\u000D')){
<span id="line868"></span>                        InString = InString.substring(1, InString.length)
<span id="line869"></span>                }
<span id="line870"></span>
<span id="line871"></span>                while (InString.indexOf('  ') != -1) {
<span id="line872"></span>                        x = InString.indexOf('  ')
<span id="line873"></span>                        InString = InString.substring(0, x) + InString.substring(x+1, InString.length)
<span id="line874"></span>                 }
<span id="line875"></span>
<span id="line876"></span>                return InString;
<span id="line877"></span>        }
<span id="line878"></span>
<span id="line879"></span>        else {
<span id="line880"></span>                return '';
<span id="line881"></span>        }
<span id="line882"></span>}
<span id="line883"></span>
<span id="line884"></span>function FindLongest(InArray){
<span id="line885"></span>	if (InArray.length </span><span>&lt; </span><span>1){return -1;}
<span id="line886"></span>
<span id="line887"></span>	var Longest = 0;
<span id="line888"></span>	for (var i=1; i</span><span>&lt;I</span><span>nArray.length; i++){
<span id="line889"></span>		if (InArray[i].length &gt; InArray[Longest].length){
<span id="line890"></span>			Longest = i;
<span id="line891"></span>		}
<span id="line892"></span>	}
<span id="line893"></span>	return Longest;
<span id="line894"></span>}
<span id="line895"></span>
<span id="line896"></span>//SELECTION OBJECT FOR TYPING WITH KEYPAD
<span id="line897"></span>var selObj = null;
<span id="line898"></span>            
<span id="line899"></span>SelObj = function(box){
<span id="line900"></span>	this.box = box;
<span id="line901"></span>	this.selStart = this.box.selectionStart;
<span id="line902"></span>	this.selEnd = this.box.selectionEnd;
<span id="line903"></span>	this.selText = this.box.value.substring(this.selStart, this.selEnd);
<span id="line904"></span>	return this;
<span id="line905"></span>}
<span id="line906"></span>
<span id="line907"></span>function setSelText(newText){
<span id="line908"></span>	var caretPos = this.selStart + newText.length;
<span id="line909"></span>	var newValue = this.box.value.substring(0, this.selStart);
<span id="line910"></span>	newValue += newText;
<span id="line911"></span>	newValue += this.box.value.substring(this.selEnd, this.box.value.length);
<span id="line912"></span>	this.box.value = newValue;
<span id="line913"></span>	this.box.setSelectionRange(caretPos, caretPos);
<span id="line914"></span>	this.box.focus();
<span id="line915"></span>}
<span id="line916"></span>SelObj.prototype.setSelText = setSelText;
<span id="line917"></span>
<span id="line918"></span>function setSelSelectionRange(start, end){
<span id="line919"></span>	this.box.setSelectionRange(start, end);
<span id="line920"></span>}
<span id="line921"></span>SelObj.prototype.setSelSelectionRange = setSelSelectionRange;
<span id="line922"></span>
<span id="line923"></span>//UNICODE CHARACTER FUNCTIONS
<span id="line924"></span>function IsCombiningDiacritic(CharNum){
<span id="line925"></span>	var Result = (((CharNum &gt;= 0x0300)&amp;&amp;(CharNum </span><span>&lt;=</span><span> 0x370))||((CharNum &gt;= 0x20d0)&amp;&amp;(CharNum </span><span>&lt;=</span><span> 0x20ff)));
<span id="line926"></span>	Result = Result || (((CharNum &gt;= 0x3099)&amp;&amp;(CharNum </span><span>&lt;=</span><span> 0x309a))||((CharNum &gt;= 0xfe20)&amp;&amp;(CharNum </span><span>&lt;=</span><span> 0xfe23)));
<span id="line927"></span>	return Result;
<span id="line928"></span>}
<span id="line929"></span>
<span id="line930"></span>function IsCJK(CharNum){
<span id="line931"></span>	return ((CharNum &gt;= 0x3000)&amp;&amp;(CharNum </span><span>&lt; </span><span>0xd800));
<span id="line932"></span>}
<span id="line933"></span>
<span id="line934"></span>//SETUP FUNCTIONS
<span id="line935"></span>//BROWSER WILL REFILL TEXT BOXES FROM CACHE IF NOT PREVENTED
<span id="line936"></span>function ClearTextBoxes(){
<span id="line937"></span>	var NList = document.getElementsByTagName('input');
<span id="line938"></span>	for (var i=0; i</span><span>&lt;N</span><span>List.length; i++){
<span id="line939"></span>		if ((NList[i].id.indexOf('Guess') &gt; -1)||(NList[i].id.indexOf('Gap') &gt; -1)){
<span id="line940"></span>			NList[i].value = '';
<span id="line941"></span>		}
<span id="line942"></span>		if (NList[i].id.indexOf('Chk') &gt; -1){
<span id="line943"></span>			NList[i].checked = '';
<span id="line944"></span>		}
<span id="line945"></span>	}
<span id="line946"></span>}
<span id="line947"></span>
<span id="line948"></span>
<span id="line949"></span>
<span id="line950"></span>
<span id="line951"></span>
<span id="line952"></span>//Polyfill for old Safari versions.
<span id="line953"></span>if (window.NodeList &amp;&amp; !NodeList.prototype.forEach) {
<span id="line954"></span>    NodeList.prototype.forEach = Array.prototype.forEach;
<span id="line955"></span>}
<span id="line956"></span>
<span id="line957"></span>
<span id="line958"></span>
<span id="line959"></span>//JMATCH-SPECIFIC CORE JAVASCRIPT CODE
<span id="line960"></span>
<span id="line961"></span>//Work around Safari bug
<span id="line962"></span>var scrollable = true;
<span id="line963"></span>
<span id="line964"></span>var listener = function(e) {
<span id="line965"></span>    if (! scrollable) {
<span id="line966"></span>        e.preventDefault();
<span id="line967"></span>    }
<span id="line968"></span>}
<span id="line969"></span>
<span id="line970"></span>document.addEventListener('touchmove', listener, { passive:false });
<span id="line971"></span>
<span id="line972"></span>var CorrectResponse = 'Correct! Well done.';
<span id="line973"></span>var IncorrectResponse = 'Sorry! Try again. ';
<span id="line974"></span>var YourScoreIs = 'Your score is ';
<span id="line975"></span>var FeedbackWidth = 200; //default
<span id="line976"></span>var ExBGColor = getComputedStyle(document.documentElement).getPropertyValue('--strExBGColor');
<span id="line977"></span>var PageBGColor = getComputedStyle(document.documentElement).getPropertyValue('--strPageBGColor');
<span id="line978"></span>var TextColor = getComputedStyle(document.documentElement).getPropertyValue('--strTextColor');
<span id="line979"></span>var TitleColor = getComputedStyle(document.documentElement).getPropertyValue('--strTitleColor');
<span id="line980"></span>var Penalties = 0;
<span id="line981"></span>var Score = 0;
<span id="line982"></span>var TimeOver = false;
<span id="line983"></span>var Locked = false;
<span id="line984"></span>var ShuffleQs = false;
<span id="line985"></span>var QsToShow = 0;
<span id="line986"></span>var ResizeTimer = null;
<span id="line987"></span>
<span id="line988"></span>var LeftColPos = 100;
<span id="line989"></span>var RightColPos = 500;
<span id="line990"></span>var DragTop = 120;
<span id="line991"></span>var Finished = false;
<span id="line992"></span>var AnswersTried = '';
<span id="line993"></span>
<span id="line994"></span>//Fixed and draggable card arrays
<span id="line995"></span>FC = new Array();
<span id="line996"></span>DC = new Array();
<span id="line997"></span>
<span id="line998"></span>var DraggingCard = null;
<span id="line999"></span>var moveFunc = function(e){e.preventDefault(); doDrag(e)};
<span id="line1000"></span>var endFunc = function(e){e.preventDefault(); endDrag(e)};
<span id="line1001"></span>
<span id="line1002"></span>function beginDrag(e, Card){
<span id="line1003"></span>	scrollable = false;
<span id="line1004"></span>	DraggingCard = Card;
<span id="line1005"></span>	DraggingCard.Highlight();
<span id="line1006"></span>	window.addEventListener('mousemove',  moveFunc);
<span id="line1007"></span>	window.addEventListener('mouseup',    endFunc);
<span id="line1008"></span>	window.addEventListener('touchmove',  moveFunc);
<span id="line1009"></span>	window.addEventListener('touchend',   endFunc);
<span id="line1010"></span>	var currX, currY;
<span id="line1011"></span>	if (e.touches){
<span id="line1012"></span>		currX = e.touches[0].clientX;
<span id="line1013"></span>		currY = e.touches[0].clientY;
<span id="line1014"></span>	}
<span id="line1015"></span>	else{
<span id="line1016"></span>		currX = e.clientX;
<span id="line1017"></span>		currY = e.clientY; 
<span id="line1018"></span>	}
<span id="line1019"></span>
<span id="line1020"></span>	topZ++;
<span id="line1021"></span>	DraggingCard.style.zIndex = topZ;
<span id="line1022"></span>	window.lastX = currX; 
<span id="line1023"></span>	window.lastY = currY;
<span id="line1024"></span>	return false;  
<span id="line1025"></span>} 
<span id="line1026"></span>
<span id="line1027"></span>
<span id="line1028"></span>function doDrag(e) {
<span id="line1029"></span>	var currX, currY;
<span id="line1030"></span>	var difX, difY;
<span id="line1031"></span>	if (e.touches){
<span id="line1032"></span>		currX = e.touches[0].clientX;
<span id="line1033"></span>		currY = e.touches[0].clientY;
<span id="line1034"></span>	}
<span id="line1035"></span>	else{
<span id="line1036"></span>		currX = e.clientX;
<span id="line1037"></span>		currY = e.clientY; 
<span id="line1038"></span>	}
<span id="line1039"></span>	
<span id="line1040"></span>	difX = currX - window.lastX; 
<span id="line1041"></span>	difY = currY - window.lastY;
<span id="line1042"></span>	DraggingCard.style.left = DraggingCard.GetL() + difX + 'px'; 
<span id="line1043"></span>	DraggingCard.style.top  = DraggingCard.GetT() + difY + 'px'; 
<span id="line1044"></span>	window.lastX = currX; 
<span id="line1045"></span>	window.lastY = currY; 
<span id="line1046"></span>	return false;
<span id="line1047"></span>} 
<span id="line1048"></span>
<span id="line1049"></span>function endDrag(e) { 
<span id="line1050"></span>	DraggingCard.Unhighlight();
<span id="line1051"></span>	window.removeEventListener('mousemove', moveFunc);
<span id="line1052"></span>	window.removeEventListener('touchmove', moveFunc);
<span id="line1053"></span>	window.removeEventListener('mouseup', endFunc);
<span id="line1054"></span>	window.removeEventListener('touchend', endFunc);
<span id="line1055"></span>	onEndDrag();
<span id="line1056"></span>	scrollable = true;
<span id="line1057"></span>	return true;
<span id="line1058"></span>} 
<span id="line1059"></span>
<span id="line1060"></span>function onEndDrag(){ 
<span id="line1061"></span>	DraggingOrigPos = parseInt(DraggingCard.getAttribute('id').substring(2));
<span id="line1062"></span>	DragEx.HandleDrop(DraggingOrigPos);
<span id="line1063"></span>	DraggingCard = null;
<span id="line1064"></span>} 
<span id="line1065"></span>
<span id="line1066"></span>//Utility functions for dimensions of elements.
<span id="line1067"></span>var GetL = function(){
<span id="line1068"></span>	return this.offsetLeft;
<span id="line1069"></span>}
<span id="line1070"></span>var GetR = function(){
<span id="line1071"></span>	return this.offsetLeft + this.offsetWidth;
<span id="line1072"></span>}
<span id="line1073"></span>var GetT = function(){
<span id="line1074"></span>	return this.offsetTop;
<span id="line1075"></span>}
<span id="line1076"></span>var GetB = function(){
<span id="line1077"></span>	return this.offsetTop + this.offsetHeight;
<span id="line1078"></span>}
<span id="line1079"></span>var GetH = function(){
<span id="line1080"></span>	return this.offsetHeight;
<span id="line1081"></span>}
<span id="line1082"></span>var GetW = function(){
<span id="line1083"></span>	return this.offsetWidth;
<span id="line1084"></span>}
<span id="line1085"></span>var Highlight = function(){
<span id="line1086"></span>	this.style.backgroundColor = TextColor;
<span id="line1087"></span>	this.style.color = ExBGColor;
<span id="line1088"></span>};
<span id="line1089"></span>var Unhighlight = function(){
<span id="line1090"></span>	this.style.backgroundColor = ExBGColor;
<span id="line1091"></span>	this.style.color = TextColor;
<span id="line1092"></span>};
<span id="line1093"></span>var GetOverlap = function(OtherCard){
<span id="line1094"></span>	var smR=(this.GetR() </span><span>&lt; </span><span>OtherCard.GetR())? this.GetR(): OtherCard.GetR();
<span id="line1095"></span>	var lgL=(this.GetL() &gt; OtherCard.GetL())? this.GetL(): OtherCard.GetL();
<span id="line1096"></span>	var HDim=smR-lgL;
<span id="line1097"></span>	if (HDim</span><span>&lt;1</span><span>){return 0;}
<span id="line1098"></span>	var smB=(this.GetB() </span><span>&lt; </span><span>OtherCard.GetB())? this.GetB(): OtherCard.GetB();
<span id="line1099"></span>	var lgT=(this.GetT() &gt; OtherCard.GetT())? this.GetT(): OtherCard.GetT();
<span id="line1100"></span>	var VDim=smB-lgT;
<span id="line1101"></span>	if (VDim</span><span>&lt;1</span><span>){return 0;}
<span id="line1102"></span>	return (HDim*VDim);	
<span id="line1103"></span>};
<span id="line1104"></span>
<span id="line1105"></span>/*
<span id="line1106"></span>  The new V7 DragEx object replaces the arrays of old.
<span id="line1107"></span>*/
<span id="line1108"></span>var V7JsonEx = '{  "ShuffleLeftItems": false,  "IsSimple": true,  "ItemsToShow": -1,  "LeftItems": [{"OrigPos": 0,     "Group": 0}, {"OrigPos": 1,     "Group": 1}, {"OrigPos": 2,     "Group": 2}, {"OrigPos": 3,     "Group": 3}, {"OrigPos": 4,     "Group": 4}],  "RightItems": [{"OrigPos": 0,     "Groups": [0], "MatchedWith": -1}, {"OrigPos": 1,     "Groups": [1], "MatchedWith": -1}, {"OrigPos": 2,     "Groups": [2], "MatchedWith": -1}, {"OrigPos": 3,     "Groups": [3], "MatchedWith": -1}, {"OrigPos": 4,     "Groups": [4], "MatchedWith": -1}]}';
<span id="line1109"></span>
<span id="line1110"></span>var DragEx = JSON.parse(V7JsonEx);
<span id="line1111"></span>
<span id="line1112"></span>//Methods for the object.
<span id="line1113"></span>DragEx.Setup = function(){
<span id="line1114"></span>	var i;
<span id="line1115"></span>	
<span id="line1116"></span>
<span id="line1117"></span>
<span id="line1118"></span>
<span id="line1119"></span>
<span id="line1120"></span>
<span id="line1121"></span>
<span id="line1122"></span>//Add custom functions to all the cards.
<span id="line1123"></span>	document.querySelectorAll('div.CardStyle').forEach(function(div){
<span id="line1124"></span>		div.Highlight = Highlight.bind(div);
<span id="line1125"></span>		div.Unhighlight = Unhighlight.bind(div);
<span id="line1126"></span>		div.GetL = GetL.bind(div);
<span id="line1127"></span>		div.GetT = GetT.bind(div);
<span id="line1128"></span>		div.GetR = GetR.bind(div);
<span id="line1129"></span>		div.GetB = GetB.bind(div);
<span id="line1130"></span>		div.GetH = GetH.bind(div);
<span id="line1131"></span>		div.GetW = GetW.bind(div);
<span id="line1132"></span>		div.GetOverlap = GetOverlap.bind(div);
<span id="line1133"></span>	}.bind(this));
<span id="line1134"></span>	
<span id="line1135"></span>//Connect each of the items to its card.
<span id="line1136"></span>	this.LeftItems.forEach(function(LI){
<span id="line1137"></span>		LI.Card = document.getElementById('L_' + LI.OrigPos);
<span id="line1138"></span>	}.bind(this));
<span id="line1139"></span>	this.RightItems.forEach(function(RI){
<span id="line1140"></span>		RI.Card = document.getElementById('R_' + RI.OrigPos);
<span id="line1141"></span>		RI.Card.addEventListener('mousedown',  (function(e){beginDrag(e, this)}.bind(RI.Card)));
<span id="line1142"></span>		RI.Card.addEventListener('touchstart', (function(e){beginDrag(e, this)}.bind(RI.Card)));
<span id="line1143"></span>		RI.Card.style.cursor = 'grab';
<span id="line1144"></span>	}.bind(this));
<span id="line1145"></span>//Reduce the items as required. Sanity check: don't allow less than 2.
<span id="line1146"></span>	if (this.ItemsToShow &gt; 2){
<span id="line1147"></span>		while (this.LeftItems.length &gt; this.ItemsToShow){
<span id="line1148"></span>			RemItem = Math.floor(this.LeftItems.length*Math.random());
<span id="line1149"></span>			OP = this.LeftItems[RemItem].OrigPos;
<span id="line1150"></span>			this.LeftItems[RemItem].Card.parentNode.removeChild(this.LeftItems[RemItem].Card);
<span id="line1151"></span>			this.LeftItems.splice([RemItem], 1);
<span id="line1152"></span>
<span id="line1153"></span>//Having removed an item from the left, we must remove the corresponding 
<span id="line1154"></span>//one from the right if it exists. (There may not be a matching item if 
<span id="line1155"></span>//the one removed was a distractor.)
<span id="line1156"></span>			for (i = 0; i </span><span>&lt; </span><span>this.RightItems.length; i++){
<span id="line1157"></span>				if (this.RightItems[i].OrigPos == OP){
<span id="line1158"></span>					this.RightItems[i].Card.parentNode.removeChild(this.RightItems[i].Card);
<span id="line1159"></span>					this.RightItems.splice(i, 1);
<span id="line1160"></span>				}
<span id="line1161"></span>			}
<span id="line1162"></span>		}
<span id="line1163"></span>	}
<span id="line1164"></span>//Now do any shuffling that's required.
<span id="line1165"></span>	if (this.ShuffleLeftItems == true){
<span id="line1166"></span>		this.LeftItems = Shuffle(this.LeftItems);
<span id="line1167"></span>	}
<span id="line1168"></span>	this.RightItems = Shuffle(this.RightItems);
<span id="line1169"></span>	
<span id="line1170"></span>	this.SetInitialPositions(true);
<span id="line1171"></span>	
<span id="line1172"></span>//Fix to avoid image dragging problem in cards with images.
<span id="line1173"></span>	var DragImgs = document.querySelectorAll('div.CardStyle img');
<span id="line1174"></span>	for (i = 0; i</span><span>&lt;D</span><span>ragImgs.length; i++){
<span id="line1175"></span>		DragImgs[i]. onmousedown = function(){return false;}
<span id="line1176"></span>	}
<span id="line1177"></span>
<span id="line1178"></span>//We use a timeout here to allow card positions to be established
<span id="line1179"></span>//before they're used for sliding matched cards.
<span id="line1180"></span>	window.addEventListener('resize', function(e){
<span id="line1181"></span>		clearTimeout(ResizeTimer);
<span id="line1182"></span>		ResizeTimer = setTimeout(function(){DragEx.SetInitialPositions(false)}, 250);
<span id="line1183"></span>	});
<span id="line1184"></span>
<span id="line1185"></span>	
<span id="line1186"></span>
<span id="line1187"></span>};
<span id="line1188"></span>
<span id="line1189"></span>DragEx.GetLeftItemByOrigPos = function(Pos){
<span id="line1190"></span>	for (var i=0; i</span><span>&lt;t</span><span>his.LeftItems.length; i++){
<span id="line1191"></span>		if (this.LeftItems[i].OrigPos === Pos){
<span id="line1192"></span>			return this.LeftItems[i];
<span id="line1193"></span>		}
<span id="line1194"></span>	}
<span id="line1195"></span>	return null;
<span id="line1196"></span>};
<span id="line1197"></span>
<span id="line1198"></span>DragEx.GetRightItemByOrigPos = function(Pos){
<span id="line1199"></span>	for (var i=0; i</span><span>&lt;t</span><span>his.RightItems.length; i++){
<span id="line1200"></span>		if (this.RightItems[i].OrigPos === Pos){
<span id="line1201"></span>			return this.RightItems[i];
<span id="line1202"></span>		}
<span id="line1203"></span>	}
<span id="line1204"></span>	return null;
<span id="line1205"></span>};
<span id="line1206"></span>
<span id="line1207"></span>DragEx.SendHome = function(ROrigPos){
<span id="line1208"></span>	Slide(ROrigPos, this.GetRightItemByOrigPos(ROrigPos).Home);
<span id="line1209"></span>};
<span id="line1210"></span>
<span id="line1211"></span>DragEx.SetInitialPositions = function(slide){
<span id="line1212"></span>	
<span id="line1213"></span>	var ExDiv = document.querySelector('div.ExerciseContainer');
<span id="line1214"></span>	
<span id="line1215"></span>//Get the default font size.
<span id="line1216"></span>	var FontSize = Math.round(parseFloat(getComputedStyle(ExDiv).fontSize));
<span id="line1217"></span>	
<span id="line1218"></span>//Get the value of any drop-shadow on the cards so we can allow for it in layout.
<span id="line1219"></span>	var DS =  window.getComputedStyle(this.LeftItems[0].Card).getPropertyValue('box-shadow').split('px ');
<span id="line1220"></span>	var DSOffset = 5;
<span id="line1221"></span>	if ((DS.length &gt; 1)&amp;&amp;(!(Number.isNaN(parseFloat(DS[1]))))){
<span id="line1222"></span>		DSOffset += Math.abs(Math.ceil(parseFloat(DS[1])));
<span id="line1223"></span>	}
<span id="line1224"></span>	
<span id="line1225"></span>//Calculate container dimensions and positions
<span id="line1226"></span>	DragTop = parseInt(document.getElementById('CheckButtonDiv').offsetHeight) + parseInt(document.getElementById('CheckButtonDiv').offsetTop) + DSOffset;
<span id="line1227"></span>	
<span id="line1228"></span>	var ExDivLeft = ExDiv.offsetLeft;
<span id="line1229"></span>	var ExDivWidth = ExDiv.offsetWidth;	
<span id="line1230"></span>	var Indent = Math.min(Math.floor(ExDivWidth / 20), FontSize);
<span id="line1231"></span>	var DragWidth = Math.floor(ExDivWidth / 4);
<span id="line1232"></span>	LeftColPos = ExDivLeft + Indent;
<span id="line1233"></span>
<span id="line1234"></span>//Calculate the width for the left items.	
<span id="line1235"></span>	var WidestLeft = 0;
<span id="line1236"></span>	for (var i=0; i</span><span>&lt;t</span><span>his.LeftItems.length; i++){
<span id="line1237"></span>		var CurrCard = this.LeftItems[i].Card;
<span id="line1238"></span>		CurrCard.style.width = '';
<span id="line1239"></span>		CurrCard.style.height = '';
<span id="line1240"></span>		var w = CurrCard.GetW() + 10;
<span id="line1241"></span>		if (w &gt; WidestLeft){
<span id="line1242"></span>			WidestLeft = w;
<span id="line1243"></span>		}
<span id="line1244"></span>	}
<span id="line1245"></span>	if (WidestLeft &gt; DragWidth){WidestLeft = DragWidth;}
<span id="line1246"></span>
<span id="line1247"></span>//Calculate the width for the right items.
<span id="line1248"></span>	DragWidth = Math.floor((ExDivWidth-WidestLeft)/2) - 24;
<span id="line1249"></span>	RightColPos = ExDivWidth + LeftColPos - (DragWidth + 14 + Indent);
<span id="line1250"></span>	var Highest = 0;
<span id="line1251"></span>	var WidestRight = 0;
<span id="line1252"></span>
<span id="line1253"></span>	for (i=0; i</span><span>&lt;t</span><span>his.RightItems.length; i++){
<span id="line1254"></span>		var CurrCard = this.RightItems[i].Card;
<span id="line1255"></span>		CurrCard.style.width = '';
<span id="line1256"></span>		CurrCard.style.height = '';
<span id="line1257"></span>		if (CurrCard.GetW() &gt; DragWidth){CurrCard.style.width = DragWidth + 'px';}
<span id="line1258"></span>		if (CurrCard.GetH() &gt; Highest){Highest = CurrCard.GetH();}
<span id="line1259"></span>		if (CurrCard.GetW() &gt; WidestRight){WidestRight = CurrCard.GetW();}
<span id="line1260"></span>	}
<span id="line1261"></span>
<span id="line1262"></span>//Size and position the right items.		
<span id="line1263"></span>	var CurrTop = DragTop;
<span id="line1264"></span>	
<span id="line1265"></span>	for (i=0; i</span><span>&lt;t</span><span>his.RightItems.length; i++){
<span id="line1266"></span>		var CurrCard = this.RightItems[i].Card;
<span id="line1267"></span>		CurrCard.style.top = CurrTop + 'px';
<span id="line1268"></span>		CurrCard.style.left = RightColPos + 'px';
<span id="line1269"></span>		CurrCard.style.height = Highest + 'px';
<span id="line1270"></span>		CurrCard.style.width = (WidestRight + 10) + 'px';
<span id="line1271"></span>		this.RightItems[i].Home = [RightColPos, CurrTop];
<span id="line1272"></span>		CurrTop = CurrTop + CurrCard.GetH() + DSOffset;
<span id="line1273"></span>	}
<span id="line1274"></span>
<span id="line1275"></span>//Size and position the left items.
<span id="line1276"></span>	CurrTop = DragTop;
<span id="line1277"></span>
<span id="line1278"></span>	for (var i=0; i</span><span>&lt;t</span><span>his.LeftItems.length; i++){
<span id="line1279"></span>		var CurrCard = this.LeftItems[i].Card;
<span id="line1280"></span>		CurrCard.style.width = WidestLeft + 'px';
<span id="line1281"></span>		if (CurrCard.GetH() </span><span>&lt; </span><span>Highest){CurrCard.style.height = Highest + 'px';}
<span id="line1282"></span>		CurrCard.style.top = CurrTop + 'px';
<span id="line1283"></span>		CurrCard.style.left = LeftColPos + 'px';
<span id="line1284"></span>		CurrTop = CurrTop + CurrCard.GetH() + DSOffset;
<span id="line1285"></span>	}
<span id="line1286"></span>
<span id="line1287"></span>//Now we clone the top navbar to create a bottom	
<span id="line1288"></span>//navbar, and position it.
<span id="line1289"></span>	var TopNav = document.getElementById('TopNavBar');
<span id="line1290"></span>	var ReadingDiv = document.getElementById('ReadingDiv');
<span id="line1291"></span>	
<span id="line1292"></span>	if (TopNav !== null){
<span id="line1293"></span>
<span id="line1294"></span>//First delete one if there is one.
<span id="line1295"></span>		var BottomNav = document.getElementById('BottomNavBar');
<span id="line1296"></span>		if (BottomNav === null){
<span id="line1297"></span>			BottomNav = document.getElementById('TopNavBar').cloneNode(true);
<span id="line1298"></span>			BottomNav.setAttribute('id', 'BottomNavBar');
<span id="line1299"></span>			BottomNav.style.position = 'absolute';
<span id="line1300"></span>			document.body.appendChild(BottomNav);
<span id="line1301"></span>		}
<span id="line1302"></span>		var LowestLeft = this.LeftItems[this.LeftItems.length - 1].Card.GetB();
<span id="line1303"></span>		var LowestRight = this.RightItems[this.RightItems.length - 1].Card.GetB();
<span id="line1304"></span>		var ReadingBottom = (ReadingDiv)? ReadingDiv.offsetTop + ReadingDiv.offsetHeight : 0;
<span id="line1305"></span>		BottomNav.style.top = (Math.max(ReadingBottom, LowestLeft, LowestRight) + FontSize) + 'px' ;
<span id="line1306"></span>		BottomNav.style.width = document.getElementById('TopNavBar').offsetWidth + 'px';
<span id="line1307"></span>	}
<span id="line1308"></span>	
<span id="line1309"></span>//Now slide any already-matched items into position.
<span id="line1310"></span>	this.RightItems.forEach(function(RI){
<span id="line1311"></span>		if (RI.MatchedWith &gt; -1){
<span id="line1312"></span>			var TargPoint = this.GetDockPoint(RI.MatchedWith, RI.Card);
<span id="line1313"></span>			if (RI.MarkedWrong == true){
<span id="line1314"></span>				RI.Card.Highlight();
<span id="line1315"></span>				TargPoint[0] = TargPoint[0] + 10;
<span id="line1316"></span>			}
<span id="line1317"></span>			if (slide == true){
<span id="line1318"></span>				Slide(RI.OrigPos, TargPoint);
<span id="line1319"></span>			}
<span id="line1320"></span>			else{
<span id="line1321"></span>				RI.Card.style.left = TargPoint[0] + 'px';
<span id="line1322"></span>				RI.Card.style.top  = TargPoint[1] + 'px'; 
<span id="line1323"></span>			}
<span id="line1324"></span>		}
<span id="line1325"></span>	}.bind(this));
<span id="line1326"></span>};
<span id="line1327"></span>
<span id="line1328"></span>DragEx.GetDockPoint = function(LeftOrigPos, RightCard){
<span id="line1329"></span>	var TargL, TargT;
<span id="line1330"></span>	var LeftItem = this.GetLeftItemByOrigPos(LeftOrigPos);
<span id="line1331"></span>	if (LeftItem !== null){
<span id="line1332"></span>		var LeftCard = LeftItem.Card;
<span id="line1333"></span>		TargL = LeftCard.GetR() + 5;
<span id="line1334"></span>		TargT = (LeftCard.GetT() + Math.floor((LeftCard.GetH() - RightCard.GetH()) / 2));
<span id="line1335"></span>		return [TargL, TargT];
<span id="line1336"></span>	}
<span id="line1337"></span>	else{
<span id="line1338"></span>		return [0,0];
<span id="line1339"></span>	}
<span id="line1340"></span>}
<span id="line1341"></span>
<span id="line1342"></span>DragEx.HandleDrop = function(ROrigPos){
<span id="line1343"></span>	var RI = this.GetRightItemByOrigPos(ROrigPos);
<span id="line1344"></span>	RI.MarkedWrong = false;
<span id="line1345"></span>	RI.MatchedWith = -1;
<span id="line1346"></span>	RI.Card.Unhighlight();
<span id="line1347"></span>	var Overlap = 0;
<span id="line1348"></span>	var MatchedWith = -1;
<span id="line1349"></span>	var i;
<span id="line1350"></span>	this.LeftItems.forEach(function(LI){
<span id="line1351"></span>		var OL = RI.Card.GetOverlap(LI.Card);
<span id="line1352"></span>//Check whether it overlaps a card, or is in exact docking position with it.
<span id="line1353"></span>		var DP = this.GetDockPoint(LI.OrigPos, RI.Card);
<span id="line1354"></span>		if ((OL &gt; Overlap)||((RI.Card.GetL() == DP[0])&amp;&amp;(RI.Card.GetT() == DP[1]))){
<span id="line1355"></span>			Overlap = OL;
<span id="line1356"></span>			MatchedWith = LI.OrigPos;
<span id="line1357"></span>		}
<span id="line1358"></span>	}.bind(this));
<span id="line1359"></span>	if (MatchedWith &gt; -1){
<span id="line1360"></span>		RI.MatchedWith = MatchedWith;
<span id="line1361"></span>		TargPoint = this.GetDockPoint(MatchedWith, RI.Card);
<span id="line1362"></span>		Slide(ROrigPos, TargPoint);
<span id="line1363"></span>		this.RightItems.forEach(function(RI2){
<span id="line1364"></span>			if ((RI2.OrigPos !== RI.OrigPos)&amp;&amp;(RI2.MatchedWith == MatchedWith)){
<span id="line1365"></span>				RI2.MatchedWith = -1;
<span id="line1366"></span>				RI2.Card.Unhighlight();
<span id="line1367"></span>				this.SendHome(RI2.OrigPos);
<span id="line1368"></span>				RI2.MarkedWrong = false;
<span id="line1369"></span>			}
<span id="line1370"></span>		}.bind(this));
<span id="line1371"></span>	}
<span id="line1372"></span>	else{
<span id="line1373"></span>		this.SendHome(ROrigPos);
<span id="line1374"></span>	}
<span id="line1375"></span>}
<span id="line1376"></span>
<span id="line1377"></span>//This function checks answers and calculates the 
<span id="line1378"></span>//current score, then returns true for "finished" or
<span id="line1379"></span>//false for "not yet finished". The object's Score
<span id="line1380"></span>//property can then be read.
<span id="line1381"></span>DragEx.CheckAnswers = function(){
<span id="line1382"></span>/*
<span id="line1383"></span>	Check each right item to see whether a) it had an 
<span id="line1384"></span>	original match on the left, and b) it is matched
<span id="line1385"></span>	to a left item whose group is one of its groups.
<span id="line1386"></span>*/
<span id="line1387"></span>	if (!this.hasOwnProperty('Penalties')){
<span id="line1388"></span>		this.Penalties = 0;
<span id="line1389"></span>	}
<span id="line1390"></span>	var ItemsToCount = 0;
<span id="line1391"></span>	var CorrectItems = 0;
<span id="line1392"></span>	var Done = true; //Assume till proven otherwise.
<span id="line1393"></span>	
<span id="line1394"></span>//Tot up the scores.
<span id="line1395"></span>	this.RightItems.forEach(function(RI){
<span id="line1396"></span>//Only use it if there is a match for it.
<span id="line1397"></span>		if (this.GetLeftItemByOrigPos(RI.OrigPos) !== null){
<span id="line1398"></span>			ItemsToCount++;
<span id="line1399"></span>			if (RI.MatchedWith !== -1){
<span id="line1400"></span>				var LI = this.GetLeftItemByOrigPos(RI.MatchedWith);
<span id="line1401"></span>				if (RI.Groups.indexOf(LI.Group) &gt; -1){
<span id="line1402"></span>					CorrectItems++;
<span id="line1403"></span>				}
<span id="line1404"></span>				else{
<span id="line1405"></span>					Done = false;
<span id="line1406"></span>					RI.Card.Highlight();
<span id="line1407"></span>					RI.MarkedWrong = true;
<span id="line1408"></span>					RI.Card.style.left = (RI.Card.GetL() + 10) + 'px';
<span id="line1409"></span>				}
<span id="line1410"></span>			}
<span id="line1411"></span>			else{
<span id="line1412"></span>				Done = false;
<span id="line1413"></span>			}
<span id="line1414"></span>		}
<span id="line1415"></span>		else{
<span id="line1416"></span>//It's a distractor and shouldn't be matched. Deduct one from score.
<span id="line1417"></span>			if (RI.MatchedWith !== -1){
<span id="line1418"></span>				Done = false;
<span id="line1419"></span>				RI.Card.Highlight();
<span id="line1420"></span>				RI.Card.style.left = (RI.Card.GetL() + 10) + 'px';
<span id="line1421"></span>				RI.MarkedWrong = true;
<span id="line1422"></span>				CorrectItems--;
<span id="line1423"></span>			}
<span id="line1424"></span>		}
<span id="line1425"></span>	}.bind(this));
<span id="line1426"></span>	if (!this.hasOwnProperty('Score')){
<span id="line1427"></span>		this.Score = 0;
<span id="line1428"></span>	}
<span id="line1429"></span>	this.Score = Math.round((100*(CorrectItems - this.Penalties))/ItemsToCount);
<span id="line1430"></span>	if (Done === false){
<span id="line1431"></span>		this.Penalties++;
<span id="line1432"></span>	}
<span id="line1433"></span>	return Done;
<span id="line1434"></span>};
<span id="line1435"></span>
<span id="line1436"></span>function Slide(ROrigPos, TargPoint){
<span id="line1437"></span>	var Card = DragEx.GetRightItemByOrigPos(ROrigPos).Card;
<span id="line1438"></span>	if (Math.abs(Card.GetL() - TargPoint[0]) </span><span>&lt;=</span><span> 5){
<span id="line1439"></span>		Card.style.left = TargPoint[0] + 'px';
<span id="line1440"></span>	}
<span id="line1441"></span>	else{
<span id="line1442"></span>		var LeftShift = Card.GetL() </span><span>&lt; </span><span>TargPoint[0]? 5: -5;
<span id="line1443"></span>		Card.style.left = Card.GetL() + LeftShift + 'px';
<span id="line1444"></span>	}
<span id="line1445"></span>	if (Card.GetT() !== TargPoint[1]){
<span id="line1446"></span>		if (Math.abs(Card.GetT() - TargPoint[1]) </span><span>&lt;=</span><span> 5){
<span id="line1447"></span>			Card.style.top = TargPoint[1] + 'px';
<span id="line1448"></span>		}
<span id="line1449"></span>		else{
<span id="line1450"></span>			var TopShift = Card.GetT() </span><span>&lt; </span><span>TargPoint[1]? 5: -5;
<span id="line1451"></span>			Card.style.top = Card.GetT() + TopShift + 'px';
<span id="line1452"></span>		}
<span id="line1453"></span>	}
<span id="line1454"></span>	if ((Card.GetL() != TargPoint[0])||(Card.GetT() != TargPoint[1])){
<span id="line1455"></span>		setTimeout('Slide(' + ROrigPos + ', [' + TargPoint[0] + ',' + TargPoint[1] + '])', 1);
<span id="line1456"></span>	}
<span id="line1457"></span>}
<span id="line1458"></span>
<span id="line1459"></span>function TimerStartUp(){
<span id="line1460"></span>	setTimeout('DragEx.Setup()', 300);
<span id="line1461"></span>}
<span id="line1462"></span>
<span id="line1463"></span>function CheckAnswers(){
<span id="line1464"></span>	if (Locked == true){return;}
<span id="line1465"></span>	
<span id="line1466"></span>	var Feedback = '';
<span id="line1467"></span>
<span id="line1468"></span>	var AllDone = DragEx.CheckAnswers();
<span id="line1469"></span>	Score = DragEx.Score;
<span id="line1470"></span>	if (Score </span><span>&lt; </span><span>0){Score = 0;}
<span id="line1471"></span>
<span id="line1472"></span>	if (AllDone == true){
<span id="line1473"></span>		Feedback = YourScoreIs + ' ' + Score + '%.</span><span>&lt;b</span><span>r/&gt;' + CorrectResponse;
<span id="line1474"></span>	}
<span id="line1475"></span>	else {
<span id="line1476"></span>		if (TimeOver == true){
<span id="line1477"></span>			Feedback = YourScoreIs + ' ' + Score + '%.'
<span id="line1478"></span>		}
<span id="line1479"></span>		else{
<span id="line1480"></span>			Feedback = YourScoreIs + ' ' + Score + '%.' + '</span><span>&lt;b</span><span>r /&gt;' + IncorrectResponse;
<span id="line1481"></span>		}
<span id="line1482"></span>	}
<span id="line1483"></span>	ShowMessage(Feedback);
<span id="line1484"></span>	
<span id="line1485"></span>//If the exercise is over, deal with that
<span id="line1486"></span>	if ((AllDone == true)||(TimeOver == true)){
<span id="line1487"></span>
<span id="line1488"></span>
<span id="line1489"></span>		TimeOver = true;
<span id="line1490"></span>		Locked = true;
<span id="line1491"></span>		Finished = true;
<span id="line1492"></span>		WriteToInstructions(Feedback);
<span id="line1493"></span>	}
<span id="line1494"></span>
<span id="line1495"></span>	
<span id="line1496"></span>//The window layout may be affected by the feedback, so 
<span id="line1497"></span>//put the cards in place again.
<span id="line1498"></span>	DragEx.SetInitialPositions(false);
<span id="line1499"></span>}
<span id="line1500"></span>
<span id="line1501"></span>
<span id="line1502"></span>
<span id="line1503"></span>
<span id="line1504"></span>
<span id="line1505"></span>
<span id="line1506"></span>
<span id="line1507"></span>
<span id="line1508"></span>
<span id="line1509"></span>//--&gt;
<span id="line1510"></span>
<span id="line1511"></span>//]]&gt;
<span id="line1512"></span>
<span id="line1513"></span></span><span>&lt;/<span class="end-tag">script</span>&gt;</span><span>
<span id="line1514"></span>
<span id="line1515"></span></span><span>&lt;/<span class="end-tag">head</span>&gt;</span><span> 
<span id="line1516"></span>
<span id="line1517"></span></span><span>&lt;<span class="start-tag">body</span> <span class="attribute-name">onload</span>="<a class="attribute-value">TimerStartUp()</a>" <span class="attribute-name">id</span>="<a class="attribute-value">TheBody</a>" &gt;</span><span> 
<span id="line1518"></span></span><span class="comment">&lt;!-- BeginTopNavButtons --&gt;</span><span>
<span id="line1519"></span>
<span id="line1520"></span>
<span id="line1521"></span></span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">class</span>="<a class="attribute-value">NavButtonBar</a>" <span class="attribute-name">id</span>="<a class="attribute-value">TopNavBar</a>"&gt;</span><span>
<span id="line1522"></span>
<span id="line1523"></span>
<span id="line1524"></span>
<span id="line1525"></span>
<span id="line1526"></span></span><span>&lt;<span class="start-tag">button</span> <span class="attribute-name">class</span>="<a class="attribute-value">NavButton</a>" <span class="attribute-name">onclick</span>="<a class="attribute-value">location='contents.htm'; return false;</a>"&gt;</span><span> Index </span><span>&lt;/<span class="end-tag">button</span>&gt;</span><span>
<span id="line1527"></span>
<span id="line1528"></span>
<span id="line1529"></span>
<span id="line1530"></span></span><span>&lt;<span class="start-tag">button</span> <span class="attribute-name">class</span>="<a class="attribute-value">NavButton</a>" <span class="attribute-name">onclick</span>="<a class="attribute-value">location='nextpage.htm'; return false;</a>"&gt;</span><span>=<span class="entity"><span>&amp;</span>gt;</span></span><span>&lt;/<span class="end-tag">button</span>&gt;</span><span>
<span id="line1531"></span>
<span id="line1532"></span>
<span id="line1533"></span></span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line1534"></span>
<span id="line1535"></span>
<span id="line1536"></span>
<span id="line1537"></span></span><span class="comment">&lt;!-- EndTopNavButtons --&gt;</span><span>
<span id="line1538"></span>
<span id="line1539"></span></span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">class</span>="<a class="attribute-value">Titles</a>"&gt;</span><span>
<span id="line1540"></span>	</span><span>&lt;<span class="start-tag">h2</span> <span class="attribute-name">class</span>="<a class="attribute-value">ExerciseTitle</a>"&gt;</span><span><span class="entity"><span>&amp;</span>#x0392;</span><span class="entity"><span>&amp;</span>#x03C1;</span><span class="entity"><span>&amp;</span>#x03B5;</span><span class="entity"><span>&amp;</span>#x03C2;</span> <span class="entity"><span>&amp;</span>#x03C4;</span><span class="entity"><span>&amp;</span>#x03BF;</span> <span class="entity"><span>&amp;</span>#x03BA;</span><span class="entity"><span>&amp;</span>#x03BF;</span><span class="entity"><span>&amp;</span>#x03B9;</span><span class="entity"><span>&amp;</span>#x03BD;</span><span class="entity"><span>&amp;</span>#x03CC;</span> <span class="entity"><span>&amp;</span>#x03C3;</span><span class="entity"><span>&amp;</span>#x03C4;</span><span class="entity"><span>&amp;</span>#x03BF;</span><span class="entity"><span>&amp;</span>#x03B9;</span><span class="entity"><span>&amp;</span>#x03C7;</span><span class="entity"><span>&amp;</span>#x03B5;</span><span class="entity"><span>&amp;</span>#x03AF;</span><span class="entity"><span>&amp;</span>#x03BF;</span>. </span><span>&lt;/<span class="end-tag">h2</span>&gt;</span><span>
<span id="line1541"></span>
<span id="line1542"></span>	</span><span>&lt;<span class="start-tag">h3</span> <span class="attribute-name">class</span>="<a class="attribute-value">ExerciseSubtitle</a>"&gt;</span><span>Matching exercise</span><span>&lt;/<span class="end-tag">h3</span>&gt;</span><span>
<span id="line1543"></span>
<span id="line1544"></span>
<span id="line1545"></span>
<span id="line1546"></span></span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line1547"></span>
<span id="line1548"></span></span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">id</span>="<a class="attribute-value">InstructionsDiv</a>" <span class="attribute-name">class</span>="<a class="attribute-value">StdDiv</a>"&gt;</span><span>
<span id="line1549"></span>	</span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">id</span>="<a class="attribute-value">Instructions</a>"&gt;</span><span>Match the items on the right to the items on the left.</span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line1550"></span></span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line1551"></span>
<span id="line1552"></span>
<span id="line1553"></span></span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">id</span>="<a class="attribute-value">ContainerDiv</a>"&gt;</span><span>
<span id="line1554"></span>
<span id="line1555"></span>
<span id="line1556"></span>
<span id="line1557"></span></span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">class</span>="<a class="attribute-value">ExerciseContainer JMatchDrag</a>"&gt;</span><span>
<span id="line1558"></span>
<span id="line1559"></span></span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">class</span>="<a class="attribute-value">StdDiv</a>" <span class="attribute-name">id</span>="<a class="attribute-value">CheckButtonDiv</a>"&gt;</span><span>
<span id="line1560"></span></span><span>&lt;<span class="start-tag">button</span> <span class="attribute-name">id</span>="<a class="attribute-value">CheckButton1</a>" <span class="attribute-name">class</span>="<a class="attribute-value">FuncButton</a>" <span class="attribute-name">onclick</span>="<a class="attribute-value">CheckAnswers()</a>"&gt;</span><span><span class="entity"><span>&amp;</span>#160;</span>Check<span class="entity"><span>&amp;</span>#160;</span></span><span>&lt;/<span class="end-tag">button</span>&gt;</span><span>
<span id="line1561"></span></span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line1562"></span>
<span id="line1563"></span>
<span id="line1564"></span></span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line1565"></span></span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line1566"></span>
<span id="line1567"></span></span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">class</span>="<a class="attribute-value">Feedback</a>" <span class="attribute-name">id</span>="<a class="attribute-value">FeedbackDiv</a>"&gt;</span><span>
<span id="line1568"></span></span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">class</span>="<a class="attribute-value">FeedbackText</a>" <span class="attribute-name">id</span>="<a class="attribute-value">FeedbackContent</a>"&gt;</span><span></span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line1569"></span></span><span>&lt;<span class="start-tag">button</span> <span class="attribute-name">id</span>="<a class="attribute-value">FeedbackOKButton</a>" <span class="attribute-name">class</span>="<a class="attribute-value">FuncButton</a>" <span class="attribute-name">onclick</span>="<a class="attribute-value">HideFeedback(); return false;</a>"&gt;</span><span><span class="entity"><span>&amp;</span>#160;</span>OK<span class="entity"><span>&amp;</span>#160;</span></span><span>&lt;/<span class="end-tag">button</span>&gt;</span><span>
<span id="line1570"></span></span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line1571"></span>
<span id="line1572"></span></span><span class="comment">&lt;!-- BeginBottomNavButtons --&gt;</span><span>
<span id="line1573"></span>
<span id="line1574"></span></span><span class="comment">&lt;!-- EndBottomNavButtons --&gt;</span><span>
<span id="line1575"></span>
<span id="line1576"></span></span><span class="comment">&lt;!-- BeginSubmissionForm --&gt;</span><span>
<span id="line1577"></span>
<span id="line1578"></span></span><span class="comment">&lt;!-- EndSubmissionForm --&gt;</span><span>
<span id="line1579"></span>
<span id="line1580"></span></span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">id</span>="<a class="attribute-value">L_0</a>" <span class="attribute-name">class</span>="<a class="attribute-value">CardStyle</a>"&gt;</span><span><span class="entity"><span>&amp;</span>#x03B8;</span><span class="entity"><span>&amp;</span>#x03B1;</span> <span class="entity"><span>&amp;</span>#x03C4;</span><span class="entity"><span>&amp;</span>#x03C1;</span><span class="entity"><span>&amp;</span>#x03AD;</span><span class="entity"><span>&amp;</span>#x03C7;</span><span class="entity"><span>&amp;</span>#x03C9;</span> </span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line1581"></span></span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">id</span>="<a class="attribute-value">L_1</a>" <span class="attribute-name">class</span>="<a class="attribute-value">CardStyle</a>"&gt;</span><span><span class="entity"><span>&amp;</span>#x03AD;</span><span class="entity"><span>&amp;</span>#x03C0;</span><span class="entity"><span>&amp;</span>#x03B1;</span><span class="entity"><span>&amp;</span>#x03B9;</span><span class="entity"><span>&amp;</span>#x03BE;</span><span class="entity"><span>&amp;</span>#x03B1;</span> </span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line1582"></span></span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">id</span>="<a class="attribute-value">L_2</a>" <span class="attribute-name">class</span>="<a class="attribute-value">CardStyle</a>"&gt;</span><span><span class="entity"><span>&amp;</span>#x03B2;</span><span class="entity"><span>&amp;</span>#x03C1;</span><span class="entity"><span>&amp;</span>#x03B9;</span><span class="entity"><span>&amp;</span>#x03C3;</span><span class="entity"><span>&amp;</span>#x03BA;</span><span class="entity"><span>&amp;</span>#x03CC;</span><span class="entity"><span>&amp;</span>#x03BC;</span><span class="entity"><span>&amp;</span>#x03BF;</span><span class="entity"><span>&amp;</span>#x03C5;</span><span class="entity"><span>&amp;</span>#x03BD;</span> </span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line1583"></span></span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">id</span>="<a class="attribute-value">L_3</a>" <span class="attribute-name">class</span>="<a class="attribute-value">CardStyle</a>"&gt;</span><span><span class="entity"><span>&amp;</span>#x03AD;</span><span class="entity"><span>&amp;</span>#x03C7;</span><span class="entity"><span>&amp;</span>#x03B5;</span><span class="entity"><span>&amp;</span>#x03B9;</span> <span class="entity"><span>&amp;</span>#x03B4;</span><span class="entity"><span>&amp;</span>#x03B9;</span><span class="entity"><span>&amp;</span>#x03B1;</span><span class="entity"><span>&amp;</span>#x03B2;</span><span class="entity"><span>&amp;</span>#x03AC;</span><span class="entity"><span>&amp;</span>#x03C3;</span><span class="entity"><span>&amp;</span>#x03B5;</span><span class="entity"><span>&amp;</span>#x03B9;</span> </span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line1584"></span></span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">id</span>="<a class="attribute-value">L_4</a>" <span class="attribute-name">class</span>="<a class="attribute-value">CardStyle</a>"&gt;</span><span><span class="entity"><span>&amp;</span>#x03B5;</span><span class="entity"><span>&amp;</span>#x03AF;</span><span class="entity"><span>&amp;</span>#x03C7;</span><span class="entity"><span>&amp;</span>#x03B1;</span><span class="entity"><span>&amp;</span>#x03C4;</span><span class="entity"><span>&amp;</span>#x03B5;</span> <span class="entity"><span>&amp;</span>#x03C0;</span><span class="entity"><span>&amp;</span>#x03B5;</span><span class="entity"><span>&amp;</span>#x03C1;</span><span class="entity"><span>&amp;</span>#x03C0;</span><span class="entity"><span>&amp;</span>#x03B1;</span><span class="entity"><span>&amp;</span>#x03C4;</span><span class="entity"><span>&amp;</span>#x03AE;</span><span class="entity"><span>&amp;</span>#x03C3;</span><span class="entity"><span>&amp;</span>#x03B5;</span><span class="entity"><span>&amp;</span>#x03B9;</span></span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line1585"></span></span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">id</span>="<a class="attribute-value">R_0</a>" <span class="attribute-name">class</span>="<a class="attribute-value">CardStyle</a>"&gt;</span><span><span class="entity"><span>&amp;</span>#x03B8;</span><span class="entity"><span>&amp;</span>#x03B1;</span> <span class="entity"><span>&amp;</span>#x03BA;</span><span class="entity"><span>&amp;</span>#x03BF;</span><span class="entity"><span>&amp;</span>#x03B9;</span><span class="entity"><span>&amp;</span>#x03BC;</span><span class="entity"><span>&amp;</span>#x03AC;</span><span class="entity"><span>&amp;</span>#x03BC;</span><span class="entity"><span>&amp;</span>#x03B1;</span><span class="entity"><span>&amp;</span>#x03B9;</span> </span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line1586"></span></span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">id</span>="<a class="attribute-value">R_1</a>" <span class="attribute-name">class</span>="<a class="attribute-value">CardStyle</a>"&gt;</span><span><span class="entity"><span>&amp;</span>#x03AD;</span><span class="entity"><span>&amp;</span>#x03B3;</span><span class="entity"><span>&amp;</span>#x03C1;</span><span class="entity"><span>&amp;</span>#x03B1;</span><span class="entity"><span>&amp;</span>#x03C8;</span><span class="entity"><span>&amp;</span>#x03B1;</span></span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line1587"></span></span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">id</span>="<a class="attribute-value">R_2</a>" <span class="attribute-name">class</span>="<a class="attribute-value">CardStyle</a>"&gt;</span><span><span class="entity"><span>&amp;</span>#x03BA;</span><span class="entity"><span>&amp;</span>#x03BF;</span><span class="entity"><span>&amp;</span>#x03BB;</span><span class="entity"><span>&amp;</span>#x03C5;</span><span class="entity"><span>&amp;</span>#x03BC;</span><span class="entity"><span>&amp;</span>#x03C0;</span><span class="entity"><span>&amp;</span>#x03BF;</span><span class="entity"><span>&amp;</span>#x03CD;</span><span class="entity"><span>&amp;</span>#x03C3;</span><span class="entity"><span>&amp;</span>#x03B1;</span></span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line1588"></span></span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">id</span>="<a class="attribute-value">R_3</a>" <span class="attribute-name">class</span>="<a class="attribute-value">CardStyle</a>"&gt;</span><span><span class="entity"><span>&amp;</span>#x03AD;</span><span class="entity"><span>&amp;</span>#x03C7;</span><span class="entity"><span>&amp;</span>#x03BF;</span><span class="entity"><span>&amp;</span>#x03C5;</span><span class="entity"><span>&amp;</span>#x03BC;</span><span class="entity"><span>&amp;</span>#x03B5;</span> <span class="entity"><span>&amp;</span>#x03C4;</span><span class="entity"><span>&amp;</span>#x03B1;</span><span class="entity"><span>&amp;</span>#x03BE;</span><span class="entity"><span>&amp;</span>#x03B9;</span><span class="entity"><span>&amp;</span>#x03B4;</span><span class="entity"><span>&amp;</span>#x03AD;</span><span class="entity"><span>&amp;</span>#x03C8;</span><span class="entity"><span>&amp;</span>#x03B5;</span><span class="entity"><span>&amp;</span>#x03B9;</span></span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line1589"></span></span><span>&lt;<span class="start-tag">div</span> <span class="attribute-name">id</span>="<a class="attribute-value">R_4</a>" <span class="attribute-name">class</span>="<a class="attribute-value">CardStyle</a>"&gt;</span><span><span class="entity"><span>&amp;</span>#x03B5;</span><span class="entity"><span>&amp;</span>#x03AF;</span><span class="entity"><span>&amp;</span>#x03C7;</span><span class="entity"><span>&amp;</span>#x03B1;</span><span class="entity"><span>&amp;</span>#x03BD;</span> <span class="entity"><span>&amp;</span>#x03C0;</span><span class="entity"><span>&amp;</span>#x03B5;</span><span class="entity"><span>&amp;</span>#x03C1;</span><span class="entity"><span>&amp;</span>#x03B9;</span><span class="entity"><span>&amp;</span>#x03C0;</span><span class="entity"><span>&amp;</span>#x03BB;</span><span class="entity"><span>&amp;</span>#x03B1;</span><span class="entity"><span>&amp;</span>#x03BD;</span><span class="entity"><span>&amp;</span>#x03B7;</span><span class="entity"><span>&amp;</span>#x03B8;</span><span class="entity"><span>&amp;</span>#x03B5;</span><span class="entity"><span>&amp;</span>#x03AF;</span></span><span>&lt;/<span class="end-tag">div</span>&gt;</span><span>
<span id="line1590"></span>
<span id="line1591"></span>
<span id="line1592"></span></span><span>&lt;/<span class="end-tag">body</span>&gt;</span><span>
<span id="line1593"></span></span><span>&lt;/<span class="end-tag">html</span>&gt;</span><span>
<span id="line1594"></span></span></pre></body></html>